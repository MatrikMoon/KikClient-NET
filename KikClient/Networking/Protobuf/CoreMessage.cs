// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messagepath/v1/core_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Messagepath.V1 {

  /// <summary>Holder for reflection information generated from messagepath/v1/core_message.proto</summary>
  public static partial class CoreMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for messagepath/v1/core_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoreMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFtZXNzYWdlcGF0aC92MS9jb3JlX21lc3NhZ2UucHJvdG8SFWNvbW1vbi5t",
            "ZXNzYWdlcGF0aC52MRoSY29tbW9uX21vZGVsLnByb3RvGhlwcm90b2J1Zl92",
            "YWxpZGF0aW9uLnByb3RvGiltZXNzYWdlcGF0aC92MS9jb3JlX21lc3NhZ2Vf",
            "b3B0aW9ucy5wcm90bxolbWVzc2FnZXBhdGgvdjEvdmlzaWJpbGl0eV9ydWxl",
            "cy5wcm90bxodbWVzc2FnZXBhdGgvdjEvbWVudGlvbnMucHJvdG8aHm1lc3Nh",
            "Z2VwYXRoL3YxL2tleWJvYXJkcy5wcm90bxocbWVzc2FnZXBhdGgvdjEvd2lk",
            "Z2V0cy5wcm90bxojbWVzc2FnZXBhdGgvdjEvYWRhcHRpdmVfY2FyZHMucHJv",
            "dG8aIm1lc3NhZ2VwYXRoL3YxL3RleHRfbWFya2Rvd24ucHJvdG8aHm1lc3Nh",
            "Z2VwYXRoL3YxL2Nhcm91c2Vscy5wcm90byLNBQoLQ29yZU1lc3NhZ2USVgob",
            "Y2Fyb3VzZWxfbWVzc2FnZV9hdHRhY2htZW50GIMEIAEoCzIwLmNvbW1vbi5t",
            "ZXNzYWdlcGF0aC52MS5DYXJvdXNlbE1lc3NhZ2VBdHRhY2htZW50El4KG3Zp",
            "c2liaWxpdHlfcnVsZXNfYXR0YWNobWVudBjoByABKAsyMC5jb21tb24ubWVz",
            "c2FnZXBhdGgudjEuVmlzaWJpbGl0eVJ1bGVzQXR0YWNobWVudEIG2p0lAggA",
            "ElgKGG1lbnRpb25fcmVwbHlfYXR0YWNobWVudBjqByABKAsyLS5jb21tb24u",
            "bWVzc2FnZXBhdGgudjEuTWVudGlvblJlcGx5QXR0YWNobWVudEIG2p0lAggA",
            "Ek8KE2tleWJvYXJkX2F0dGFjaG1lbnQY6wcgASgLMikuY29tbW9uLm1lc3Nh",
            "Z2VwYXRoLnYxLktleWJvYXJkQXR0YWNobWVudEIG2p0lAggAEloKGWtleWJv",
            "YXJkX3JlcGx5X2F0dGFjaG1lbnQY7AcgASgLMi4uY29tbW9uLm1lc3NhZ2Vw",
            "YXRoLnYxLktleWJvYXJkUmVwbHlBdHRhY2htZW50QgbanSUCCAESSwoRd2lk",
            "Z2V0X2F0dGFjaG1lbnQY7QcgASgLMicuY29tbW9uLm1lc3NhZ2VwYXRoLnYx",
            "LldpZGdldEF0dGFjaG1lbnRCBtqdJQIIABJYChhhZGFwdGl2ZV9jYXJkX2F0",
            "dGFjaG1lbnQY7gcgASgLMi0uY29tbW9uLm1lc3NhZ2VwYXRoLnYxLkFkYXB0",
            "aXZlQ2FyZEF0dGFjaG1lbnRCBtqdJQIIABJYChh0ZXh0X21hcmtkb3duX2F0",
            "dGFjaG1lbnQY7wcgASgLMi0uY29tbW9uLm1lc3NhZ2VwYXRoLnYxLlRleHRN",
            "YXJrZG93bkF0dGFjaG1lbnRCBtqdJQIIAEKOAQoZY29tLmtpay5tZXNzYWdl",
            "cGF0aC5tb2RlbEIQQ29yZU1lc3NhZ2VQcm90b1ABWlNnaXRodWIuY29tL2tp",
            "a2ludGVyYWN0aXZlL3hpcGhpYXMtbW9kZWwtY29tbW9uL2dlbmVyYXRlZC9n",
            "by9tZXNzYWdlcGF0aDttZXNzYWdlcGF0aKABAaICBE1QVEhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonModelReflection.Descriptor, global::Kik.Validation.ProtobufValidationReflection.Descriptor, global::Common.Messagepath.V1.CoreMessageOptionsReflection.Descriptor, global::Common.Messagepath.V1.VisibilityRulesReflection.Descriptor, global::Common.Messagepath.V1.MentionsReflection.Descriptor, global::Common.Messagepath.V1.KeyboardsReflection.Descriptor, global::Common.Messagepath.V1.WidgetsReflection.Descriptor, global::Common.Messagepath.V1.AdaptiveCardsReflection.Descriptor, global::Common.Messagepath.V1.TextMarkdownReflection.Descriptor, global::Common.Messagepath.V1.CarouselsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Messagepath.V1.CoreMessage), global::Common.Messagepath.V1.CoreMessage.Parser, new[]{ "CarouselMessageAttachment", "VisibilityRulesAttachment", "MentionReplyAttachment", "KeyboardAttachment", "KeyboardReplyAttachment", "WidgetAttachment", "AdaptiveCardAttachment", "TextMarkdownAttachment" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///----------------------------------------------------------------------------------------------
  /// Base attributes
  /// 1-499
  ///----------------------------------------------------------------------------------------------
  /// </summary>
  public sealed partial class CoreMessage : pb::IMessage<CoreMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CoreMessage> _parser = new pb::MessageParser<CoreMessage>(() => new CoreMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Messagepath.V1.CoreMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreMessage(CoreMessage other) : this() {
      carouselMessageAttachment_ = other.carouselMessageAttachment_ != null ? other.carouselMessageAttachment_.Clone() : null;
      visibilityRulesAttachment_ = other.visibilityRulesAttachment_ != null ? other.visibilityRulesAttachment_.Clone() : null;
      mentionReplyAttachment_ = other.mentionReplyAttachment_ != null ? other.mentionReplyAttachment_.Clone() : null;
      keyboardAttachment_ = other.keyboardAttachment_ != null ? other.keyboardAttachment_.Clone() : null;
      keyboardReplyAttachment_ = other.keyboardReplyAttachment_ != null ? other.keyboardReplyAttachment_.Clone() : null;
      widgetAttachment_ = other.widgetAttachment_ != null ? other.widgetAttachment_.Clone() : null;
      adaptiveCardAttachment_ = other.adaptiveCardAttachment_ != null ? other.adaptiveCardAttachment_.Clone() : null;
      textMarkdownAttachment_ = other.textMarkdownAttachment_ != null ? other.textMarkdownAttachment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreMessage Clone() {
      return new CoreMessage(this);
    }

    /// <summary>Field number for the "carousel_message_attachment" field.</summary>
    public const int CarouselMessageAttachmentFieldNumber = 515;
    private global::Common.Messagepath.V1.CarouselMessageAttachment carouselMessageAttachment_;
    /// <summary>
    ///----------------------------------------------------------------------------------------------
    /// Main mutually exclusive attachments
    /// 500-999
    ///----------------------------------------------------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.CarouselMessageAttachment CarouselMessageAttachment {
      get { return carouselMessageAttachment_; }
      set {
        carouselMessageAttachment_ = value;
      }
    }

    /// <summary>Field number for the "visibility_rules_attachment" field.</summary>
    public const int VisibilityRulesAttachmentFieldNumber = 1000;
    private global::Common.Messagepath.V1.VisibilityRulesAttachment visibilityRulesAttachment_;
    /// <summary>
    /// This attachment is used to override the clients default rules for where to display the message
    /// and how to send push (among other things) - see comments on the message definition for more
    /// info.
    ///
    /// This attachment may ONLY be set on server generated messages and messages from bots.
    /// It is NOT valid for native clients to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.VisibilityRulesAttachment VisibilityRulesAttachment {
      get { return visibilityRulesAttachment_; }
      set {
        visibilityRulesAttachment_ = value;
      }
    }

    /// <summary>Field number for the "mention_reply_attachment" field.</summary>
    public const int MentionReplyAttachmentFieldNumber = 1002;
    private global::Common.Messagepath.V1.MentionReplyAttachment mentionReplyAttachment_;
    /// <summary>
    /// For mention replies (from bots to users), this attachment is used to indicate the user who
    /// originally mentioned the bot.
    ///
    /// This should only be used the client for internal logic specific to mention-reply messages
    /// (e.g. on iPhone 10.9 it is used to determine whether to show the "Reply" button)
    /// DO NOT use this attachment to determine visibility rules (use the visibility_rules_attachment for that).
    ///
    /// This attachment may ONLY be sent by bots.
    /// It is NOT valid for native clients to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.MentionReplyAttachment MentionReplyAttachment {
      get { return mentionReplyAttachment_; }
      set {
        mentionReplyAttachment_ = value;
      }
    }

    /// <summary>Field number for the "keyboard_attachment" field.</summary>
    public const int KeyboardAttachmentFieldNumber = 1003;
    private global::Common.Messagepath.V1.KeyboardAttachment keyboardAttachment_;
    /// <summary>
    /// The keyboard attachment is sent by the Bots Platform in order for clients to update their
    /// keyboard display.
    ///
    /// This attachment may not be included in the event that no change in user keyboard is desired
    /// from a message.
    ///
    /// Historically, this property was known as "Suggested Responses", but in the interest of
    /// flexibility, and future-compatibility, it was generalized to a field that implies changing
    /// a user's input mechanism, rather than only suggesting responses.
    ///
    /// This attachment may ONLY be set by bots.
    /// It is NOT valid for native clients to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.KeyboardAttachment KeyboardAttachment {
      get { return keyboardAttachment_; }
      set {
        keyboardAttachment_ = value;
      }
    }

    /// <summary>Field number for the "keyboard_reply_attachment" field.</summary>
    public const int KeyboardReplyAttachmentFieldNumber = 1004;
    private global::Common.Messagepath.V1.KeyboardReplyAttachment keyboardReplyAttachment_;
    /// <summary>
    /// The keyboard reply attachment is sent by clients in order to identify when a user has used
    /// the input mechanism that was provided by a bot-provided keyboard attachment.
    ///
    /// This attachment may ONLY be set by clients.
    /// It is NOT valid for bots to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.KeyboardReplyAttachment KeyboardReplyAttachment {
      get { return keyboardReplyAttachment_; }
      set {
        keyboardReplyAttachment_ = value;
      }
    }

    /// <summary>Field number for the "widget_attachment" field.</summary>
    public const int WidgetAttachmentFieldNumber = 1005;
    private global::Common.Messagepath.V1.WidgetAttachment widgetAttachment_;
    /// <summary>
    /// The widget attachment is sent by the Bots Platform in order for clients to update their
    /// widget display.
    ///
    /// This attachment may not be included in the event that no change in conversation widgets
    /// is desired from a message.
    ///
    /// This attachment may ONLY be set by bots.
    /// It is NOT valid for native clients to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.WidgetAttachment WidgetAttachment {
      get { return widgetAttachment_; }
      set {
        widgetAttachment_ = value;
      }
    }

    /// <summary>Field number for the "adaptive_card_attachment" field.</summary>
    public const int AdaptiveCardAttachmentFieldNumber = 1006;
    private global::Common.Messagepath.V1.AdaptiveCardAttachment adaptiveCardAttachment_;
    /// <summary>
    /// For adaptive card messages (from bots to users), this attachment is used to indicate how an
    /// adaptive card message should be rendered.
    ///
    /// This should be used by the client to retrieve the appropriate JSON card definition(s) then
    /// render the message.
    ///
    /// This attachment may ONLY be set by bots.
    /// It is NOT valid for native clients to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.AdaptiveCardAttachment AdaptiveCardAttachment {
      get { return adaptiveCardAttachment_; }
      set {
        adaptiveCardAttachment_ = value;
      }
    }

    /// <summary>Field number for the "text_markdown_attachment" field.</summary>
    public const int TextMarkdownAttachmentFieldNumber = 1007;
    private global::Common.Messagepath.V1.TextMarkdownAttachment textMarkdownAttachment_;
    /// <summary>
    /// For text messages (from bots to users), this attachment is used by the clients
    /// to render markdown text.
    ///
    /// This attachment may ONLY be set by bots.
    /// It is NOT valid for native clients to send messages with this attachment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Messagepath.V1.TextMarkdownAttachment TextMarkdownAttachment {
      get { return textMarkdownAttachment_; }
      set {
        textMarkdownAttachment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CarouselMessageAttachment, other.CarouselMessageAttachment)) return false;
      if (!object.Equals(VisibilityRulesAttachment, other.VisibilityRulesAttachment)) return false;
      if (!object.Equals(MentionReplyAttachment, other.MentionReplyAttachment)) return false;
      if (!object.Equals(KeyboardAttachment, other.KeyboardAttachment)) return false;
      if (!object.Equals(KeyboardReplyAttachment, other.KeyboardReplyAttachment)) return false;
      if (!object.Equals(WidgetAttachment, other.WidgetAttachment)) return false;
      if (!object.Equals(AdaptiveCardAttachment, other.AdaptiveCardAttachment)) return false;
      if (!object.Equals(TextMarkdownAttachment, other.TextMarkdownAttachment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (carouselMessageAttachment_ != null) hash ^= CarouselMessageAttachment.GetHashCode();
      if (visibilityRulesAttachment_ != null) hash ^= VisibilityRulesAttachment.GetHashCode();
      if (mentionReplyAttachment_ != null) hash ^= MentionReplyAttachment.GetHashCode();
      if (keyboardAttachment_ != null) hash ^= KeyboardAttachment.GetHashCode();
      if (keyboardReplyAttachment_ != null) hash ^= KeyboardReplyAttachment.GetHashCode();
      if (widgetAttachment_ != null) hash ^= WidgetAttachment.GetHashCode();
      if (adaptiveCardAttachment_ != null) hash ^= AdaptiveCardAttachment.GetHashCode();
      if (textMarkdownAttachment_ != null) hash ^= TextMarkdownAttachment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (carouselMessageAttachment_ != null) {
        output.WriteRawTag(154, 32);
        output.WriteMessage(CarouselMessageAttachment);
      }
      if (visibilityRulesAttachment_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(VisibilityRulesAttachment);
      }
      if (mentionReplyAttachment_ != null) {
        output.WriteRawTag(210, 62);
        output.WriteMessage(MentionReplyAttachment);
      }
      if (keyboardAttachment_ != null) {
        output.WriteRawTag(218, 62);
        output.WriteMessage(KeyboardAttachment);
      }
      if (keyboardReplyAttachment_ != null) {
        output.WriteRawTag(226, 62);
        output.WriteMessage(KeyboardReplyAttachment);
      }
      if (widgetAttachment_ != null) {
        output.WriteRawTag(234, 62);
        output.WriteMessage(WidgetAttachment);
      }
      if (adaptiveCardAttachment_ != null) {
        output.WriteRawTag(242, 62);
        output.WriteMessage(AdaptiveCardAttachment);
      }
      if (textMarkdownAttachment_ != null) {
        output.WriteRawTag(250, 62);
        output.WriteMessage(TextMarkdownAttachment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (carouselMessageAttachment_ != null) {
        output.WriteRawTag(154, 32);
        output.WriteMessage(CarouselMessageAttachment);
      }
      if (visibilityRulesAttachment_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(VisibilityRulesAttachment);
      }
      if (mentionReplyAttachment_ != null) {
        output.WriteRawTag(210, 62);
        output.WriteMessage(MentionReplyAttachment);
      }
      if (keyboardAttachment_ != null) {
        output.WriteRawTag(218, 62);
        output.WriteMessage(KeyboardAttachment);
      }
      if (keyboardReplyAttachment_ != null) {
        output.WriteRawTag(226, 62);
        output.WriteMessage(KeyboardReplyAttachment);
      }
      if (widgetAttachment_ != null) {
        output.WriteRawTag(234, 62);
        output.WriteMessage(WidgetAttachment);
      }
      if (adaptiveCardAttachment_ != null) {
        output.WriteRawTag(242, 62);
        output.WriteMessage(AdaptiveCardAttachment);
      }
      if (textMarkdownAttachment_ != null) {
        output.WriteRawTag(250, 62);
        output.WriteMessage(TextMarkdownAttachment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (carouselMessageAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CarouselMessageAttachment);
      }
      if (visibilityRulesAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VisibilityRulesAttachment);
      }
      if (mentionReplyAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MentionReplyAttachment);
      }
      if (keyboardAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KeyboardAttachment);
      }
      if (keyboardReplyAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KeyboardReplyAttachment);
      }
      if (widgetAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WidgetAttachment);
      }
      if (adaptiveCardAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AdaptiveCardAttachment);
      }
      if (textMarkdownAttachment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TextMarkdownAttachment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreMessage other) {
      if (other == null) {
        return;
      }
      if (other.carouselMessageAttachment_ != null) {
        if (carouselMessageAttachment_ == null) {
          CarouselMessageAttachment = new global::Common.Messagepath.V1.CarouselMessageAttachment();
        }
        CarouselMessageAttachment.MergeFrom(other.CarouselMessageAttachment);
      }
      if (other.visibilityRulesAttachment_ != null) {
        if (visibilityRulesAttachment_ == null) {
          VisibilityRulesAttachment = new global::Common.Messagepath.V1.VisibilityRulesAttachment();
        }
        VisibilityRulesAttachment.MergeFrom(other.VisibilityRulesAttachment);
      }
      if (other.mentionReplyAttachment_ != null) {
        if (mentionReplyAttachment_ == null) {
          MentionReplyAttachment = new global::Common.Messagepath.V1.MentionReplyAttachment();
        }
        MentionReplyAttachment.MergeFrom(other.MentionReplyAttachment);
      }
      if (other.keyboardAttachment_ != null) {
        if (keyboardAttachment_ == null) {
          KeyboardAttachment = new global::Common.Messagepath.V1.KeyboardAttachment();
        }
        KeyboardAttachment.MergeFrom(other.KeyboardAttachment);
      }
      if (other.keyboardReplyAttachment_ != null) {
        if (keyboardReplyAttachment_ == null) {
          KeyboardReplyAttachment = new global::Common.Messagepath.V1.KeyboardReplyAttachment();
        }
        KeyboardReplyAttachment.MergeFrom(other.KeyboardReplyAttachment);
      }
      if (other.widgetAttachment_ != null) {
        if (widgetAttachment_ == null) {
          WidgetAttachment = new global::Common.Messagepath.V1.WidgetAttachment();
        }
        WidgetAttachment.MergeFrom(other.WidgetAttachment);
      }
      if (other.adaptiveCardAttachment_ != null) {
        if (adaptiveCardAttachment_ == null) {
          AdaptiveCardAttachment = new global::Common.Messagepath.V1.AdaptiveCardAttachment();
        }
        AdaptiveCardAttachment.MergeFrom(other.AdaptiveCardAttachment);
      }
      if (other.textMarkdownAttachment_ != null) {
        if (textMarkdownAttachment_ == null) {
          TextMarkdownAttachment = new global::Common.Messagepath.V1.TextMarkdownAttachment();
        }
        TextMarkdownAttachment.MergeFrom(other.TextMarkdownAttachment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 4122: {
            if (carouselMessageAttachment_ == null) {
              CarouselMessageAttachment = new global::Common.Messagepath.V1.CarouselMessageAttachment();
            }
            input.ReadMessage(CarouselMessageAttachment);
            break;
          }
          case 8002: {
            if (visibilityRulesAttachment_ == null) {
              VisibilityRulesAttachment = new global::Common.Messagepath.V1.VisibilityRulesAttachment();
            }
            input.ReadMessage(VisibilityRulesAttachment);
            break;
          }
          case 8018: {
            if (mentionReplyAttachment_ == null) {
              MentionReplyAttachment = new global::Common.Messagepath.V1.MentionReplyAttachment();
            }
            input.ReadMessage(MentionReplyAttachment);
            break;
          }
          case 8026: {
            if (keyboardAttachment_ == null) {
              KeyboardAttachment = new global::Common.Messagepath.V1.KeyboardAttachment();
            }
            input.ReadMessage(KeyboardAttachment);
            break;
          }
          case 8034: {
            if (keyboardReplyAttachment_ == null) {
              KeyboardReplyAttachment = new global::Common.Messagepath.V1.KeyboardReplyAttachment();
            }
            input.ReadMessage(KeyboardReplyAttachment);
            break;
          }
          case 8042: {
            if (widgetAttachment_ == null) {
              WidgetAttachment = new global::Common.Messagepath.V1.WidgetAttachment();
            }
            input.ReadMessage(WidgetAttachment);
            break;
          }
          case 8050: {
            if (adaptiveCardAttachment_ == null) {
              AdaptiveCardAttachment = new global::Common.Messagepath.V1.AdaptiveCardAttachment();
            }
            input.ReadMessage(AdaptiveCardAttachment);
            break;
          }
          case 8058: {
            if (textMarkdownAttachment_ == null) {
              TextMarkdownAttachment = new global::Common.Messagepath.V1.TextMarkdownAttachment();
            }
            input.ReadMessage(TextMarkdownAttachment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 4122: {
            if (carouselMessageAttachment_ == null) {
              CarouselMessageAttachment = new global::Common.Messagepath.V1.CarouselMessageAttachment();
            }
            input.ReadMessage(CarouselMessageAttachment);
            break;
          }
          case 8002: {
            if (visibilityRulesAttachment_ == null) {
              VisibilityRulesAttachment = new global::Common.Messagepath.V1.VisibilityRulesAttachment();
            }
            input.ReadMessage(VisibilityRulesAttachment);
            break;
          }
          case 8018: {
            if (mentionReplyAttachment_ == null) {
              MentionReplyAttachment = new global::Common.Messagepath.V1.MentionReplyAttachment();
            }
            input.ReadMessage(MentionReplyAttachment);
            break;
          }
          case 8026: {
            if (keyboardAttachment_ == null) {
              KeyboardAttachment = new global::Common.Messagepath.V1.KeyboardAttachment();
            }
            input.ReadMessage(KeyboardAttachment);
            break;
          }
          case 8034: {
            if (keyboardReplyAttachment_ == null) {
              KeyboardReplyAttachment = new global::Common.Messagepath.V1.KeyboardReplyAttachment();
            }
            input.ReadMessage(KeyboardReplyAttachment);
            break;
          }
          case 8042: {
            if (widgetAttachment_ == null) {
              WidgetAttachment = new global::Common.Messagepath.V1.WidgetAttachment();
            }
            input.ReadMessage(WidgetAttachment);
            break;
          }
          case 8050: {
            if (adaptiveCardAttachment_ == null) {
              AdaptiveCardAttachment = new global::Common.Messagepath.V1.AdaptiveCardAttachment();
            }
            input.ReadMessage(AdaptiveCardAttachment);
            break;
          }
          case 8058: {
            if (textMarkdownAttachment_ == null) {
              TextMarkdownAttachment = new global::Common.Messagepath.V1.TextMarkdownAttachment();
            }
            input.ReadMessage(TextMarkdownAttachment);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
