// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kik_options.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kik {

  /// <summary>Holder for reflection information generated from kik_options.proto</summary>
  public static partial class KikOptionsReflection {

    #region Descriptor
    /// <summary>File descriptor for kik_options.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KikOptionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFraWtfb3B0aW9ucy5wcm90bxIDa2lrGiBnb29nbGUvcHJvdG9idWYvZGVz",
            "Y3JpcHRvci5wcm90byJ0ChFDaGVja1N0eWxlT3B0aW9ucxIaCgtpZ25vcmVf",
            "cGF0aBgBIAEoCDoFZmFsc2USHQoOaWdub3JlX3ZlcnNpb24YAiABKAg6BWZh",
            "bHNlEiQKFWlnbm9yZV9wYWNrYWdlX3ByZWZpeBgDIAEoCDoFZmFsc2U6SgoK",
            "Y2hlY2tzdHlsZRIcLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucxi1pAUg",
            "ASgLMhYua2lrLkNoZWNrU3R5bGVPcHRpb25zQmQKD2NvbS5raWsub3B0aW9u",
            "c1pRZ2l0aHViLmNvbS9raWtpbnRlcmFjdGl2ZS94aXBoaWFzLW1vZGVsLWNv",
            "bW1vbi9nZW5lcmF0ZWQvZ28va2lrb3B0aW9ucztraWtvcHRpb25z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pb::Extension[] { KikOptionsExtensions.Checkstyle }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kik.CheckStyleOptions), global::Kik.CheckStyleOptions.Parser, new[]{ "IgnorePath", "IgnoreVersion", "IgnorePackagePrefix" }, null, null, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of kik_options.proto</summary>
  public static partial class KikOptionsExtensions {
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FileOptions, global::Kik.CheckStyleOptions> Checkstyle =
      new pb::Extension<global::Google.Protobuf.Reflection.FileOptions, global::Kik.CheckStyleOptions>(86581, pb::FieldCodec.ForMessage(692650, global::Kik.CheckStyleOptions.Parser));
  }

  #region Messages
  /// <summary>
  ///
  /// These options allow files to be exempt from specific checkstyle rules.
  ///    They should only be used in extreme circumstances,
  ///    when the proto file cannot or should not follow checkstyle conventions
  /// </summary>
  public sealed partial class CheckStyleOptions : pb::IMessage<CheckStyleOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CheckStyleOptions> _parser = new pb::MessageParser<CheckStyleOptions>(() => new CheckStyleOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckStyleOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kik.KikOptionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckStyleOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckStyleOptions(CheckStyleOptions other) : this() {
      _hasBits0 = other._hasBits0;
      ignorePath_ = other.ignorePath_;
      ignoreVersion_ = other.ignoreVersion_;
      ignorePackagePrefix_ = other.ignorePackagePrefix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckStyleOptions Clone() {
      return new CheckStyleOptions(this);
    }

    /// <summary>Field number for the "ignore_path" field.</summary>
    public const int IgnorePathFieldNumber = 1;
    private readonly static bool IgnorePathDefaultValue = false;

    private bool ignorePath_;
    /// <summary>
    /// Exempts file from having a directory path that matches the package name of a proto file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnorePath {
      get { if ((_hasBits0 & 1) != 0) { return ignorePath_; } else { return IgnorePathDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ignorePath_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgnorePath {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ignore_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgnorePath() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ignore_version" field.</summary>
    public const int IgnoreVersionFieldNumber = 2;
    private readonly static bool IgnoreVersionDefaultValue = false;

    private bool ignoreVersion_;
    /// <summary>
    /// Exempts file from having a version for the proto file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreVersion {
      get { if ((_hasBits0 & 2) != 0) { return ignoreVersion_; } else { return IgnoreVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ignoreVersion_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgnoreVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ignore_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgnoreVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ignore_package_prefix" field.</summary>
    public const int IgnorePackagePrefixFieldNumber = 3;
    private readonly static bool IgnorePackagePrefixDefaultValue = false;

    private bool ignorePackagePrefix_;
    /// <summary>
    /// Exempts file from having the package prefix of its package (such as common, mobile, internal, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnorePackagePrefix {
      get { if ((_hasBits0 & 4) != 0) { return ignorePackagePrefix_; } else { return IgnorePackagePrefixDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ignorePackagePrefix_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_package_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIgnorePackagePrefix {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ignore_package_prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIgnorePackagePrefix() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckStyleOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckStyleOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnorePath != other.IgnorePath) return false;
      if (IgnoreVersion != other.IgnoreVersion) return false;
      if (IgnorePackagePrefix != other.IgnorePackagePrefix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIgnorePath) hash ^= IgnorePath.GetHashCode();
      if (HasIgnoreVersion) hash ^= IgnoreVersion.GetHashCode();
      if (HasIgnorePackagePrefix) hash ^= IgnorePackagePrefix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIgnorePath) {
        output.WriteRawTag(8);
        output.WriteBool(IgnorePath);
      }
      if (HasIgnoreVersion) {
        output.WriteRawTag(16);
        output.WriteBool(IgnoreVersion);
      }
      if (HasIgnorePackagePrefix) {
        output.WriteRawTag(24);
        output.WriteBool(IgnorePackagePrefix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIgnorePath) {
        output.WriteRawTag(8);
        output.WriteBool(IgnorePath);
      }
      if (HasIgnoreVersion) {
        output.WriteRawTag(16);
        output.WriteBool(IgnoreVersion);
      }
      if (HasIgnorePackagePrefix) {
        output.WriteRawTag(24);
        output.WriteBool(IgnorePackagePrefix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIgnorePath) {
        size += 1 + 1;
      }
      if (HasIgnoreVersion) {
        size += 1 + 1;
      }
      if (HasIgnorePackagePrefix) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckStyleOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasIgnorePath) {
        IgnorePath = other.IgnorePath;
      }
      if (other.HasIgnoreVersion) {
        IgnoreVersion = other.IgnoreVersion;
      }
      if (other.HasIgnorePackagePrefix) {
        IgnorePackagePrefix = other.IgnorePackagePrefix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IgnorePath = input.ReadBool();
            break;
          }
          case 16: {
            IgnoreVersion = input.ReadBool();
            break;
          }
          case 24: {
            IgnorePackagePrefix = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IgnorePath = input.ReadBool();
            break;
          }
          case 16: {
            IgnoreVersion = input.ReadBool();
            break;
          }
          case 24: {
            IgnorePackagePrefix = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
