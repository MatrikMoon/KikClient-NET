// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: masksdata_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mobile.Masks.V1 {

  /// <summary>Holder for reflection information generated from masksdata_service.proto</summary>
  public static partial class MasksdataServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for masksdata_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MasksdataServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdtYXNrc2RhdGFfc2VydmljZS5wcm90bxIPbW9iaWxlLm1hc2tzLnYxGhlw",
            "cm90b2J1Zl92YWxpZGF0aW9uLnByb3RvGhJjb21tb25fbW9kZWwucHJvdG8i",
            "WwoLTGlzdFJlcXVlc3QSJwoWcmVxdWVzdGVkX2xpc3RfdmVyc2lvbhgBIAEo",
            "CUIHyp0lAzCjEBIjChJsb2NhbF9saXN0X3ZlcnNpb24YAiABKAlCB8qdJQMw",
            "oxAiZgoMTGlzdFJlc3BvbnNlEhcKB3ZlcnNpb24YASABKAlCBsqdJQIIARI9",
            "CglyZXNvdXJjZXMYAiADKAsyHC5tb2JpbGUubWFza3MudjEuTWFza0RldGFp",
            "bHNCDMqdJQgIAXgBgAHIASKtAwoLTWFza0RldGFpbHMSEgoCaWQYASABKAlC",
            "BsqdJQIIARIUCgRuYW1lGAIgASgJQgbKnSUCCAESIgoNdGh1bWJuYWlsX3Vy",
            "bBgDIAEoCUILyp0lBwgBKAEwoxASGwoLZnJhbWVfY291bnQYBCABKA1CBsqd",
            "JQIIARIaCgpmcmFtZV9yYXRlGAUgASgNQgbKnSUCCAESGgoKbG9vcF9jb3Vu",
            "dBgGIAEoDUIGyp0lAggBEi4KGXNlcXVlbmNlX2FyY2hpdmVfbG9jYXRpb24Y",
            "ByABKAlCC8qdJQcIASgBMKMQEiEKDnNlcXVlbmNlX29yZGVyGAggAygFQgnK",
            "nSUFeACAAWQSQQoJcmVjdGFuZ2xlGAkgASgLMiYubW9iaWxlLm1hc2tzLnYx",
            "Lk1hc2tEZXRhaWxzLlJlY3RhbmdsZUIGyp0lAggBGmUKCVJlY3RhbmdsZRIT",
            "CgN0b3AYASABKAVCBsqdJQIIARIUCgRsZWZ0GAIgASgFQgbKnSUCCAESFQoF",
            "d2lkdGgYAyABKAVCBsqdJQIIARIWCgZoZWlnaHQYBCABKAVCBsqdJQIIATL5",
            "AQoJTWFza3NEYXRhElAKEUdldFByb2R1Y3Rpb25MaXN0EhwubW9iaWxlLm1h",
            "c2tzLnYxLkxpc3RSZXF1ZXN0Gh0ubW9iaWxlLm1hc2tzLnYxLkxpc3RSZXNw",
            "b25zZRJLCgxHZXRTdGFnZUxpc3QSHC5tb2JpbGUubWFza3MudjEuTGlzdFJl",
            "cXVlc3QaHS5tb2JpbGUubWFza3MudjEuTGlzdFJlc3BvbnNlEk0KDkdldFZl",
            "cnNpb25MaXN0EhwubW9iaWxlLm1hc2tzLnYxLkxpc3RSZXF1ZXN0Gh0ubW9i",
            "aWxlLm1hc2tzLnYxLkxpc3RSZXNwb25zZUJlChVjb20ua2lrLm1hc2tzZGF0",
            "YS5ycGNaTGdpdGh1Yi5jb20va2lraW50ZXJhY3RpdmUveGlwaGlhcy1hcGkt",
            "bW9iaWxlL2dlbmVyYXRlZC9nby9tYXNrcy92MTttYXNrc2RhdGFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Kik.Validation.ProtobufValidationReflection.Descriptor, global::Common.CommonModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobile.Masks.V1.ListRequest), global::Mobile.Masks.V1.ListRequest.Parser, new[]{ "RequestedListVersion", "LocalListVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobile.Masks.V1.ListResponse), global::Mobile.Masks.V1.ListResponse.Parser, new[]{ "Version", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobile.Masks.V1.MaskDetails), global::Mobile.Masks.V1.MaskDetails.Parser, new[]{ "Id", "Name", "ThumbnailUrl", "FrameCount", "FrameRate", "LoopCount", "SequenceArchiveLocation", "SequenceOrder", "Rectangle" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mobile.Masks.V1.MaskDetails.Types.Rectangle), global::Mobile.Masks.V1.MaskDetails.Types.Rectangle.Parser, new[]{ "Top", "Left", "Width", "Height" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ListRequest : pb::IMessage<ListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListRequest> _parser = new pb::MessageParser<ListRequest>(() => new ListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobile.Masks.V1.MasksdataServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRequest(ListRequest other) : this() {
      requestedListVersion_ = other.requestedListVersion_;
      localListVersion_ = other.localListVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRequest Clone() {
      return new ListRequest(this);
    }

    /// <summary>Field number for the "requested_list_version" field.</summary>
    public const int RequestedListVersionFieldNumber = 1;
    private string requestedListVersion_ = "";
    /// <summary>
    /// The version of the list to be served. Ignored by GetProductionList\GetStageList.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestedListVersion {
      get { return requestedListVersion_; }
      set {
        requestedListVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_list_version" field.</summary>
    public const int LocalListVersionFieldNumber = 2;
    private string localListVersion_ = "";
    /// <summary>
    /// The version of the list the client currently holds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalListVersion {
      get { return localListVersion_; }
      set {
        localListVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestedListVersion != other.RequestedListVersion) return false;
      if (LocalListVersion != other.LocalListVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestedListVersion.Length != 0) hash ^= RequestedListVersion.GetHashCode();
      if (LocalListVersion.Length != 0) hash ^= LocalListVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestedListVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestedListVersion);
      }
      if (LocalListVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocalListVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestedListVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestedListVersion);
      }
      if (LocalListVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LocalListVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestedListVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestedListVersion);
      }
      if (LocalListVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalListVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestedListVersion.Length != 0) {
        RequestedListVersion = other.RequestedListVersion;
      }
      if (other.LocalListVersion.Length != 0) {
        LocalListVersion = other.LocalListVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestedListVersion = input.ReadString();
            break;
          }
          case 18: {
            LocalListVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RequestedListVersion = input.ReadString();
            break;
          }
          case 18: {
            LocalListVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListResponse : pb::IMessage<ListResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListResponse> _parser = new pb::MessageParser<ListResponse>(() => new ListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobile.Masks.V1.MasksdataServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListResponse(ListResponse other) : this() {
      version_ = other.version_;
      resources_ = other.resources_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListResponse Clone() {
      return new ListResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mobile.Masks.V1.MaskDetails> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(18, global::Mobile.Masks.V1.MaskDetails.Parser);
    private readonly pbc::RepeatedField<global::Mobile.Masks.V1.MaskDetails> resources_ = new pbc::RepeatedField<global::Mobile.Masks.V1.MaskDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mobile.Masks.V1.MaskDetails> Resources {
      get { return resources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!resources_.Equals(other.resources_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= resources_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      resources_.WriteTo(output, _repeated_resources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      resources_.WriteTo(ref output, _repeated_resources_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += resources_.CalculateSize(_repeated_resources_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      resources_.Add(other.resources_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            resources_.AddEntriesFrom(ref input, _repeated_resources_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An object describing a sequence of png images that are layered over the video feed.
  /// The video feed size is assumed to be VGA portrait (480*640)
  /// </summary>
  public sealed partial class MaskDetails : pb::IMessage<MaskDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MaskDetails> _parser = new pb::MessageParser<MaskDetails>(() => new MaskDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaskDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobile.Masks.V1.MasksdataServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaskDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaskDetails(MaskDetails other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      thumbnailUrl_ = other.thumbnailUrl_;
      frameCount_ = other.frameCount_;
      frameRate_ = other.frameRate_;
      loopCount_ = other.loopCount_;
      sequenceArchiveLocation_ = other.sequenceArchiveLocation_;
      sequenceOrder_ = other.sequenceOrder_.Clone();
      rectangle_ = other.rectangle_ != null ? other.rectangle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaskDetails Clone() {
      return new MaskDetails(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A UUID, the mask's id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Mask name, might be user facing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail_url" field.</summary>
    public const int ThumbnailUrlFieldNumber = 3;
    private string thumbnailUrl_ = "";
    /// <summary>
    /// URL of the filter's thumbnail to display on the selection bar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThumbnailUrl {
      get { return thumbnailUrl_; }
      set {
        thumbnailUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame_count" field.</summary>
    public const int FrameCountFieldNumber = 4;
    private uint frameCount_;
    /// <summary>
    /// The number of frames in this seqeunce
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameCount {
      get { return frameCount_; }
      set {
        frameCount_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate" field.</summary>
    public const int FrameRateFieldNumber = 5;
    private uint frameRate_;
    /// <summary>
    /// Frames per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "loop_count" field.</summary>
    public const int LoopCountFieldNumber = 6;
    private uint loopCount_;
    /// <summary>
    /// Number of times to play. 0 = infinite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoopCount {
      get { return loopCount_; }
      set {
        loopCount_ = value;
      }
    }

    /// <summary>Field number for the "sequence_archive_location" field.</summary>
    public const int SequenceArchiveLocationFieldNumber = 7;
    private string sequenceArchiveLocation_ = "";
    /// <summary>
    /// URL of a zip file with all the sequence images
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SequenceArchiveLocation {
      get { return sequenceArchiveLocation_; }
      set {
        sequenceArchiveLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_order" field.</summary>
    public const int SequenceOrderFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_sequenceOrder_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> sequenceOrder_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// the index order in which to play the frames. If not set then frames default order applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SequenceOrder {
      get { return sequenceOrder_; }
    }

    /// <summary>Field number for the "rectangle" field.</summary>
    public const int RectangleFieldNumber = 9;
    private global::Mobile.Masks.V1.MaskDetails.Types.Rectangle rectangle_;
    /// <summary>
    /// The frame in which to place the image sequence over the stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mobile.Masks.V1.MaskDetails.Types.Rectangle Rectangle {
      get { return rectangle_; }
      set {
        rectangle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaskDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaskDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ThumbnailUrl != other.ThumbnailUrl) return false;
      if (FrameCount != other.FrameCount) return false;
      if (FrameRate != other.FrameRate) return false;
      if (LoopCount != other.LoopCount) return false;
      if (SequenceArchiveLocation != other.SequenceArchiveLocation) return false;
      if(!sequenceOrder_.Equals(other.sequenceOrder_)) return false;
      if (!object.Equals(Rectangle, other.Rectangle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ThumbnailUrl.Length != 0) hash ^= ThumbnailUrl.GetHashCode();
      if (FrameCount != 0) hash ^= FrameCount.GetHashCode();
      if (FrameRate != 0) hash ^= FrameRate.GetHashCode();
      if (LoopCount != 0) hash ^= LoopCount.GetHashCode();
      if (SequenceArchiveLocation.Length != 0) hash ^= SequenceArchiveLocation.GetHashCode();
      hash ^= sequenceOrder_.GetHashCode();
      if (rectangle_ != null) hash ^= Rectangle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ThumbnailUrl);
      }
      if (FrameCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FrameCount);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameRate);
      }
      if (LoopCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LoopCount);
      }
      if (SequenceArchiveLocation.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SequenceArchiveLocation);
      }
      sequenceOrder_.WriteTo(output, _repeated_sequenceOrder_codec);
      if (rectangle_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Rectangle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ThumbnailUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ThumbnailUrl);
      }
      if (FrameCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FrameCount);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameRate);
      }
      if (LoopCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LoopCount);
      }
      if (SequenceArchiveLocation.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SequenceArchiveLocation);
      }
      sequenceOrder_.WriteTo(ref output, _repeated_sequenceOrder_codec);
      if (rectangle_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Rectangle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ThumbnailUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThumbnailUrl);
      }
      if (FrameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameCount);
      }
      if (FrameRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRate);
      }
      if (LoopCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoopCount);
      }
      if (SequenceArchiveLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceArchiveLocation);
      }
      size += sequenceOrder_.CalculateSize(_repeated_sequenceOrder_codec);
      if (rectangle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaskDetails other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ThumbnailUrl.Length != 0) {
        ThumbnailUrl = other.ThumbnailUrl;
      }
      if (other.FrameCount != 0) {
        FrameCount = other.FrameCount;
      }
      if (other.FrameRate != 0) {
        FrameRate = other.FrameRate;
      }
      if (other.LoopCount != 0) {
        LoopCount = other.LoopCount;
      }
      if (other.SequenceArchiveLocation.Length != 0) {
        SequenceArchiveLocation = other.SequenceArchiveLocation;
      }
      sequenceOrder_.Add(other.sequenceOrder_);
      if (other.rectangle_ != null) {
        if (rectangle_ == null) {
          Rectangle = new global::Mobile.Masks.V1.MaskDetails.Types.Rectangle();
        }
        Rectangle.MergeFrom(other.Rectangle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ThumbnailUrl = input.ReadString();
            break;
          }
          case 32: {
            FrameCount = input.ReadUInt32();
            break;
          }
          case 40: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 48: {
            LoopCount = input.ReadUInt32();
            break;
          }
          case 58: {
            SequenceArchiveLocation = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            sequenceOrder_.AddEntriesFrom(input, _repeated_sequenceOrder_codec);
            break;
          }
          case 74: {
            if (rectangle_ == null) {
              Rectangle = new global::Mobile.Masks.V1.MaskDetails.Types.Rectangle();
            }
            input.ReadMessage(Rectangle);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ThumbnailUrl = input.ReadString();
            break;
          }
          case 32: {
            FrameCount = input.ReadUInt32();
            break;
          }
          case 40: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 48: {
            LoopCount = input.ReadUInt32();
            break;
          }
          case 58: {
            SequenceArchiveLocation = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            sequenceOrder_.AddEntriesFrom(ref input, _repeated_sequenceOrder_codec);
            break;
          }
          case 74: {
            if (rectangle_ == null) {
              Rectangle = new global::Mobile.Masks.V1.MaskDetails.Types.Rectangle();
            }
            input.ReadMessage(Rectangle);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MaskDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Rectangle : pb::IMessage<Rectangle>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mobile.Masks.V1.MaskDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rectangle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rectangle(Rectangle other) : this() {
          top_ = other.top_;
          left_ = other.left_;
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rectangle Clone() {
          return new Rectangle(this);
        }

        /// <summary>Field number for the "top" field.</summary>
        public const int TopFieldNumber = 1;
        private int top_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Top {
          get { return top_; }
          set {
            top_ = value;
          }
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 2;
        private int left_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 4;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rectangle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rectangle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Top != other.Top) return false;
          if (Left != other.Left) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Top != 0) hash ^= Top.GetHashCode();
          if (Left != 0) hash ^= Left.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Top != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Top);
          }
          if (Left != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Left);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Top != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Top);
          }
          if (Left != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Left);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Top != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
          }
          if (Left != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rectangle other) {
          if (other == null) {
            return;
          }
          if (other.Top != 0) {
            Top = other.Top;
          }
          if (other.Left != 0) {
            Left = other.Left;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Top = input.ReadInt32();
                break;
              }
              case 16: {
                Left = input.ReadInt32();
                break;
              }
              case 24: {
                Width = input.ReadInt32();
                break;
              }
              case 32: {
                Height = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Top = input.ReadInt32();
                break;
              }
              case 16: {
                Left = input.ReadInt32();
                break;
              }
              case 24: {
                Width = input.ReadInt32();
                break;
              }
              case 32: {
                Height = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
