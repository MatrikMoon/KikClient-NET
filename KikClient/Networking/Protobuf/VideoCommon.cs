// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: video/v1/video_common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Video.V1 {

  /// <summary>Holder for reflection information generated from video/v1/video_common.proto</summary>
  public static partial class VideoCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for video/v1/video_common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VideoCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cht2aWRlby92MS92aWRlb19jb21tb24ucHJvdG8SD2NvbW1vbi52aWRlby52",
            "MRoSY29tbW9uX21vZGVsLnByb3RvGhlwcm90b2J1Zl92YWxpZGF0aW9uLnBy",
            "b3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIm4KB0NvbnZv",
            "SWQSNgoKb25lX3RvX29uZRgBIAEoCzIgLmNvbW1vbi52aWRlby52MS5PbmVU",
            "b09uZUNvbnZvSWRIABIjCgVncm91cBgCIAEoCzISLmNvbW1vbi5YaUdyb3Vw",
            "SmlkSABCBgoEa2luZCJHCg9PbmVUb09uZUNvbnZvSWQSNAoFdXNlcnMYASAD",
            "KAsyFS5jb21tb24uWGlCYXJlVXNlckppZEIOyp0lCggBeAKAAQKIAQAi+wIK",
            "D0NvbnZvVmlkZW9TdGF0ZRIyCghjb252b19pZBgBIAEoCzIYLmNvbW1vbi52",
            "aWRlby52MS5Db252b0lkQgbKnSUCCAESTAoLdXNlcl9zdGF0ZXMYAiADKAsy",
            "Ki5jb21tb24udmlkZW8udjEuQ29udm9WaWRlb1N0YXRlLlVzZXJTdGF0ZUIL",
            "yp0lBwgAeACAAWQSNQoJdGltZXN0YW1wGAMgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcEIGyp0lAggBGq4BCglVc2VyU3RhdGUSKwoEdXNlchgB",
            "IAEoCzIVLmNvbW1vbi5YaUJhcmVVc2VySmlkQgbKnSUCCAESPwoFc3RhdGUY",
            "AiABKA4yMC5jb21tb24udmlkZW8udjEuQ29udm9WaWRlb1N0YXRlLlVzZXJT",
            "dGF0ZS5TdGF0ZSIzCgVTdGF0ZRILCgdOT1RfU0VUEAASDgoKQ09OTkVDVElO",
            "RxAFEg0KCUNPTk5FQ1RFRBAKImIKGENvbmZlcmVuY2VDb25uZWN0aW9uSW5m",
            "bxIXCgRob3N0GAEgASgJQgnKnSUFCAEwgAgSDAoEcG9ydBgCIAEoBRIfCg1j",
            "b25mZXJlbmNlX2lkGAMgASgJQgjKnSUECAEwICI6ChpNZWRpYVNlcnZlckNv",
            "bm5lY3Rpb25Ub2tlbhIcCgdwYXlsb2FkGAEgASgMQgvKnSUHCAEoATCAKEJb",
            "Cg1jb20ua2lrLnZpZGVvWkpnaXRodWIuY29tL2tpa2ludGVyYWN0aXZlL3hp",
            "cGhpYXMtbW9kZWwtY29tbW9uL2dlbmVyYXRlZC9nby92aWRlby92MTt2aWRl",
            "b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonModelReflection.Descriptor, global::Kik.Validation.ProtobufValidationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Video.V1.ConvoId), global::Common.Video.V1.ConvoId.Parser, new[]{ "OneToOne", "Group" }, new[]{ "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Video.V1.OneToOneConvoId), global::Common.Video.V1.OneToOneConvoId.Parser, new[]{ "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Video.V1.ConvoVideoState), global::Common.Video.V1.ConvoVideoState.Parser, new[]{ "ConvoId", "UserStates", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Common.Video.V1.ConvoVideoState.Types.UserState), global::Common.Video.V1.ConvoVideoState.Types.UserState.Parser, new[]{ "User", "State" }, null, new[]{ typeof(global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Video.V1.ConferenceConnectionInfo), global::Common.Video.V1.ConferenceConnectionInfo.Parser, new[]{ "Host", "Port", "ConferenceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Video.V1.MediaServerConnectionToken), global::Common.Video.V1.MediaServerConnectionToken.Parser, new[]{ "Payload" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// TODO: Generalize this beyond just video
  /// </summary>
  public sealed partial class ConvoId : pb::IMessage<ConvoId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConvoId> _parser = new pb::MessageParser<ConvoId>(() => new ConvoId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Video.V1.VideoCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvoId(ConvoId other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.OneToOne:
          OneToOne = other.OneToOne.Clone();
          break;
        case KindOneofCase.Group:
          Group = other.Group.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvoId Clone() {
      return new ConvoId(this);
    }

    /// <summary>Field number for the "one_to_one" field.</summary>
    public const int OneToOneFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Video.V1.OneToOneConvoId OneToOne {
      get { return kindCase_ == KindOneofCase.OneToOne ? (global::Common.Video.V1.OneToOneConvoId) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.OneToOne;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiGroupJid Group {
      get { return kindCase_ == KindOneofCase.Group ? (global::Common.XiGroupJid) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Group;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      OneToOne = 1,
      Group = 2,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OneToOne, other.OneToOne)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (KindCase != other.KindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.OneToOne) hash ^= OneToOne.GetHashCode();
      if (kindCase_ == KindOneofCase.Group) hash ^= Group.GetHashCode();
      hash ^= (int) kindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (kindCase_ == KindOneofCase.OneToOne) {
        output.WriteRawTag(10);
        output.WriteMessage(OneToOne);
      }
      if (kindCase_ == KindOneofCase.Group) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (kindCase_ == KindOneofCase.OneToOne) {
        output.WriteRawTag(10);
        output.WriteMessage(OneToOne);
      }
      if (kindCase_ == KindOneofCase.Group) {
        output.WriteRawTag(18);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.OneToOne) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneToOne);
      }
      if (kindCase_ == KindOneofCase.Group) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvoId other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.OneToOne:
          if (OneToOne == null) {
            OneToOne = new global::Common.Video.V1.OneToOneConvoId();
          }
          OneToOne.MergeFrom(other.OneToOne);
          break;
        case KindOneofCase.Group:
          if (Group == null) {
            Group = new global::Common.XiGroupJid();
          }
          Group.MergeFrom(other.Group);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Common.Video.V1.OneToOneConvoId subBuilder = new global::Common.Video.V1.OneToOneConvoId();
            if (kindCase_ == KindOneofCase.OneToOne) {
              subBuilder.MergeFrom(OneToOne);
            }
            input.ReadMessage(subBuilder);
            OneToOne = subBuilder;
            break;
          }
          case 18: {
            global::Common.XiGroupJid subBuilder = new global::Common.XiGroupJid();
            if (kindCase_ == KindOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Common.Video.V1.OneToOneConvoId subBuilder = new global::Common.Video.V1.OneToOneConvoId();
            if (kindCase_ == KindOneofCase.OneToOne) {
              subBuilder.MergeFrom(OneToOne);
            }
            input.ReadMessage(subBuilder);
            OneToOne = subBuilder;
            break;
          }
          case 18: {
            global::Common.XiGroupJid subBuilder = new global::Common.XiGroupJid();
            if (kindCase_ == KindOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// TODO: Generalize this beyond just video
  /// </summary>
  public sealed partial class OneToOneConvoId : pb::IMessage<OneToOneConvoId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OneToOneConvoId> _parser = new pb::MessageParser<OneToOneConvoId>(() => new OneToOneConvoId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneToOneConvoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Video.V1.VideoCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneConvoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneConvoId(OneToOneConvoId other) : this() {
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneConvoId Clone() {
      return new OneToOneConvoId(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.XiBareUserJid> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Common.XiBareUserJid.Parser);
    private readonly pbc::RepeatedField<global::Common.XiBareUserJid> users_ = new pbc::RepeatedField<global::Common.XiBareUserJid>();
    /// <summary>
    /// MUST be ordered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.XiBareUserJid> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneToOneConvoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneToOneConvoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      users_.WriteTo(ref output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneToOneConvoId other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// Note that the ConvoVideoState does NOT include any information about the conference for a particular
  /// conversation.
  ///
  /// ConvoVideoState represents a snapshot of active users who are connected to the media server and
  /// users who are in the process of connecting to the media server.
  ///
  /// TODO: Ensure design covers the bounded time an user can be in CONNECTING state.
  /// </summary>
  public sealed partial class ConvoVideoState : pb::IMessage<ConvoVideoState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConvoVideoState> _parser = new pb::MessageParser<ConvoVideoState>(() => new ConvoVideoState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvoVideoState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Video.V1.VideoCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvoVideoState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvoVideoState(ConvoVideoState other) : this() {
      convoId_ = other.convoId_ != null ? other.convoId_.Clone() : null;
      userStates_ = other.userStates_.Clone();
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvoVideoState Clone() {
      return new ConvoVideoState(this);
    }

    /// <summary>Field number for the "convo_id" field.</summary>
    public const int ConvoIdFieldNumber = 1;
    private global::Common.Video.V1.ConvoId convoId_;
    /// <summary>
    /// Convo video state is specific to a convo (ie: this is the primary key)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Video.V1.ConvoId ConvoId {
      get { return convoId_; }
      set {
        convoId_ = value;
      }
    }

    /// <summary>Field number for the "user_states" field.</summary>
    public const int UserStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.Video.V1.ConvoVideoState.Types.UserState> _repeated_userStates_codec
        = pb::FieldCodec.ForMessage(18, global::Common.Video.V1.ConvoVideoState.Types.UserState.Parser);
    private readonly pbc::RepeatedField<global::Common.Video.V1.ConvoVideoState.Types.UserState> userStates_ = new pbc::RepeatedField<global::Common.Video.V1.ConvoVideoState.Types.UserState>();
    /// <summary>
    /// Note:
    ///  -   There MAY NOT be an entry for every person in the convo, this should just contain
    ///      those users involved in the video part of the convo (ex: there WILL NOT be an entry here
    ///      for every member of a group).
    ///  -   This is NOT guaranteed to reflect the latest group membership state (ex: there may be
    ///      users who are no longer in a group chat which still appear in this list). TODO: document expected handling
    ///  -   Each user will appear only once in this list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.Video.V1.ConvoVideoState.Types.UserState> UserStates {
      get { return userStates_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// This is crucial information needed to handle the ordering of state change events on the
    /// receiving end.
    ///
    /// Please note, due to Rounds internal implementation needs, this timestamp is not always the clock
    /// time of the event, it is however sequential in the order of actual events. Controlling this
    /// timestamp should only be done at source (Rounds state tracking). DO NOT compare this timestamp
    /// to any other system time to determine sequential ordering of events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvoVideoState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvoVideoState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConvoId, other.ConvoId)) return false;
      if(!userStates_.Equals(other.userStates_)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (convoId_ != null) hash ^= ConvoId.GetHashCode();
      hash ^= userStates_.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (convoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConvoId);
      }
      userStates_.WriteTo(output, _repeated_userStates_codec);
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (convoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConvoId);
      }
      userStates_.WriteTo(ref output, _repeated_userStates_codec);
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (convoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConvoId);
      }
      size += userStates_.CalculateSize(_repeated_userStates_codec);
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvoVideoState other) {
      if (other == null) {
        return;
      }
      if (other.convoId_ != null) {
        if (convoId_ == null) {
          ConvoId = new global::Common.Video.V1.ConvoId();
        }
        ConvoId.MergeFrom(other.ConvoId);
      }
      userStates_.Add(other.userStates_);
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (convoId_ == null) {
              ConvoId = new global::Common.Video.V1.ConvoId();
            }
            input.ReadMessage(ConvoId);
            break;
          }
          case 18: {
            userStates_.AddEntriesFrom(input, _repeated_userStates_codec);
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (convoId_ == null) {
              ConvoId = new global::Common.Video.V1.ConvoId();
            }
            input.ReadMessage(ConvoId);
            break;
          }
          case 18: {
            userStates_.AddEntriesFrom(ref input, _repeated_userStates_codec);
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ConvoVideoState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UserState : pb::IMessage<UserState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UserState> _parser = new pb::MessageParser<UserState>(() => new UserState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Common.Video.V1.ConvoVideoState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserState(UserState other) : this() {
          user_ = other.user_ != null ? other.user_.Clone() : null;
          state_ = other.state_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserState Clone() {
          return new UserState(this);
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 1;
        private global::Common.XiBareUserJid user_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Common.XiBareUserJid User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State state_ = global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State.NotSet;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(User, other.User)) return false;
          if (State != other.State) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (user_ != null) hash ^= User.GetHashCode();
          if (State != global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State.NotSet) hash ^= State.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (State != global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State.NotSet) {
            output.WriteRawTag(16);
            output.WriteEnum((int) State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (State != global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State.NotSet) {
            output.WriteRawTag(16);
            output.WriteEnum((int) State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (State != global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State.NotSet) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserState other) {
          if (other == null) {
            return;
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::Common.XiBareUserJid();
            }
            User.MergeFrom(other.User);
          }
          if (other.State != global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State.NotSet) {
            State = other.State;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::Common.XiBareUserJid();
                }
                input.ReadMessage(User);
                break;
              }
              case 16: {
                State = (global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::Common.XiBareUserJid();
                }
                input.ReadMessage(User);
                break;
              }
              case 16: {
                State = (global::Common.Video.V1.ConvoVideoState.Types.UserState.Types.State) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the UserState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum State {
            /// <summary>
            /// This should never be used and exists to detect cases where the producer of this message
            /// has not set the state.
            /// </summary>
            [pbr::OriginalName("NOT_SET")] NotSet = 0,
            /// <summary>
            /// A user is in CONNECTING state when he/she has requested to join the conference (and
            /// the server has accepted the request) however, the client is not yet connected to the
            /// media server
            ///
            /// There is a bounded amount of time clients should be in this CONNECTING state.
            ///
            /// Note that the _typical_ flow is that users will first be in this connecting state then move to
            /// the connected state, but no component of the system should rely on receiving each of these
            /// incremental updates.
            /// </summary>
            [pbr::OriginalName("CONNECTING")] Connecting = 5,
            /// <summary>
            /// This indicate that the client has an active connection to the media server.
            /// </summary>
            [pbr::OriginalName("CONNECTED")] Connected = 10,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// TERMINOLOGY: Conference: is an active video chat session on a media server.
  ///
  /// Notes:
  ///  -   This message contains the necessary information to connect to a media server
  ///  -   Its expected that there SHOULD only be a single conference for a particular conversation
  ///      at any given time.
  /// </summary>
  public sealed partial class ConferenceConnectionInfo : pb::IMessage<ConferenceConnectionInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConferenceConnectionInfo> _parser = new pb::MessageParser<ConferenceConnectionInfo>(() => new ConferenceConnectionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConferenceConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Video.V1.VideoCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConferenceConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConferenceConnectionInfo(ConferenceConnectionInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      conferenceId_ = other.conferenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConferenceConnectionInfo Clone() {
      return new ConferenceConnectionInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "conference_id" field.</summary>
    public const int ConferenceIdFieldNumber = 3;
    private string conferenceId_ = "";
    /// <summary>
    /// This is assigned by the Round's VideoConferenceService
    ///
    /// It's comprised of 3 parts and is in the format of
    ///     "A.B.C"
    /// Where
    ///     A - app name (i.e. kik)
    ///     B - 16 characters (base 64 encoded) acts as the underline ID
    ///     C - 4 characters (base 64 encoded) acts as a checksum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConferenceId {
      get { return conferenceId_; }
      set {
        conferenceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConferenceConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConferenceConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ConferenceId != other.ConferenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ConferenceId.Length != 0) hash ^= ConferenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (ConferenceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConferenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (ConferenceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConferenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ConferenceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConferenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConferenceConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ConferenceId.Length != 0) {
        ConferenceId = other.ConferenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            ConferenceId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            ConferenceId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This token should be passed to the media server when the client connects to it.
  /// It MAY be used to identify the connecting client but MUST NOT be interpreted by the client.
  /// </summary>
  public sealed partial class MediaServerConnectionToken : pb::IMessage<MediaServerConnectionToken>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MediaServerConnectionToken> _parser = new pb::MessageParser<MediaServerConnectionToken>(() => new MediaServerConnectionToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaServerConnectionToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Video.V1.VideoCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaServerConnectionToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaServerConnectionToken(MediaServerConnectionToken other) : this() {
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaServerConnectionToken Clone() {
      return new MediaServerConnectionToken(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// Clients MUST NOT interpret this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaServerConnectionToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaServerConnectionToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaServerConnectionToken other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
