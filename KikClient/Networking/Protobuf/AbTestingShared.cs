// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: abtesting/v1/ab_testing_shared.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Abtesting.V1 {

  /// <summary>Holder for reflection information generated from abtesting/v1/ab_testing_shared.proto</summary>
  public static partial class AbTestingSharedReflection {

    #region Descriptor
    /// <summary>File descriptor for abtesting/v1/ab_testing_shared.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AbTestingSharedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRhYnRlc3RpbmcvdjEvYWJfdGVzdGluZ19zaGFyZWQucHJvdG8SE2NvbW1v",
            "bi5hYnRlc3RpbmcudjEaGXByb3RvYnVmX3ZhbGlkYXRpb24ucHJvdG8iaQoK",
            "RXhwZXJpbWVudBIZCgRuYW1lGAEgASgJQgvKnSUHCAEoATD/ARIcCgd2YXJp",
            "YW50GAIgASgJQgvKnSUHCAEoATD/ARIiCg1leHBlcmltZW50X2lkGAMgASgJ",
            "QgvKnSUHCAAoADD/AUJyChVjb20ua2lrLmFidGVzdGluZy5ycGNaUmdpdGh1",
            "Yi5jb20va2lraW50ZXJhY3RpdmUveGlwaGlhcy1tb2RlbC1jb21tb24vZ2Vu",
            "ZXJhdGVkL2dvL2FidGVzdGluZy92MTthYnRlc3RpbmeiAgRYSUFCYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Kik.Validation.ProtobufValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Abtesting.V1.Experiment), global::Common.Abtesting.V1.Experiment.Parser, new[]{ "Name", "Variant", "ExperimentId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*************************************************************************************************
  /// A/B Testing identifiers
  ///*************************************************************************************************
  /// </summary>
  public sealed partial class Experiment : pb::IMessage<Experiment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Experiment> _parser = new pb::MessageParser<Experiment>(() => new Experiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Experiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Abtesting.V1.AbTestingSharedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiment(Experiment other) : this() {
      name_ = other.name_;
      variant_ = other.variant_;
      experimentId_ = other.experimentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiment Clone() {
      return new Experiment(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the of the AB test
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 2;
    private string variant_ = "";
    /// <summary>
    /// Variant of AB test the particular user is associated with
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variant {
      get { return variant_; }
      set {
        variant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 3;
    private string experimentId_ = "";
    /// <summary>
    /// An id that may be used to distinguish multiple runs of the same experiment.
    /// Clients ** MUST NOT ** use this for any business-switching behaviour, this is ** ONLY ** meant to be
    /// transitively passed on in the client metric for data purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Experiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Experiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Variant != other.Variant) return false;
      if (ExperimentId != other.ExperimentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Variant.Length != 0) hash ^= Variant.GetHashCode();
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Variant.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Variant);
      }
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Variant.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Variant);
      }
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Variant.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variant);
      }
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Experiment other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Variant.Length != 0) {
        Variant = other.Variant;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Variant = input.ReadString();
            break;
          }
          case 26: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Variant = input.ReadString();
            break;
          }
          case 26: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
