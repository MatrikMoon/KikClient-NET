// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf_validation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kik.Validation {

  /// <summary>Holder for reflection information generated from protobuf_validation.proto</summary>
  public static partial class ProtobufValidationReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf_validation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtobufValidationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlwcm90b2J1Zl92YWxpZGF0aW9uLnByb3RvEg5raWsudmFsaWRhdGlvbhog",
            "Z29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8ixAIKD0ZpZWxkVmFs",
            "aWRhdGlvbhIYCgltYW5kYXRvcnkYASABKAg6BWZhbHNlEg0KBXJlZ2V4GAIg",
            "ASgJEhcKD21pbl9ieXRlX2xlbmd0aBgFIAEoBRIXCg9tYXhfYnl0ZV9sZW5n",
            "dGgYBiABKAUSDwoHbWluX3ZhbBgHIAEoEBIPCgdtYXhfdmFsGAggASgQEhYK",
            "Dm1pbl9kb3VibGVfdmFsGAsgASgBEhYKDm1heF9kb3VibGVfdmFsGAwgASgB",
            "EhcKD21pbl9yZXBldGl0aW9ucxgPIAEoDRIXCg9tYXhfcmVwZXRpdGlvbnMY",
            "ECABKA0SNgoHb3JkZXJlZBgRIAEoDjIlLmtpay52YWxpZGF0aW9uLkZpZWxk",
            "VmFsaWRhdGlvbi5PcmRlciIaCgVPcmRlchIHCgNBU0MQABIICgRERVNDEAE6",
            "WgoQZmllbGRfdmFsaWRhdGlvbhIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9w",
            "dGlvbnMY2dMEIAEoCzIfLmtpay52YWxpZGF0aW9uLkZpZWxkVmFsaWRhdGlv",
            "bjpRCgdtYXBfa2V5Eh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxja",
            "0wQgASgLMh8ua2lrLnZhbGlkYXRpb24uRmllbGRWYWxpZGF0aW9uQmwKF2Nv",
            "bS5raWsucHJvdG92YWxpZGF0aW9uWlFnaXRodWIuY29tL2tpa2ludGVyYWN0",
            "aXZlL3hpcGhpYXMtbW9kZWwtY29tbW9uL2dlbmVyYXRlZC9nby9raWtvcHRp",
            "b25zO2tpa29wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pb::Extension[] { ProtobufValidationExtensions.FieldValidation, ProtobufValidationExtensions.MapKey }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kik.Validation.FieldValidation), global::Kik.Validation.FieldValidation.Parser, new[]{ "Mandatory", "Regex", "MinByteLength", "MaxByteLength", "MinVal", "MaxVal", "MinDoubleVal", "MaxDoubleVal", "MinRepetitions", "MaxRepetitions", "Ordered" }, null, new[]{ typeof(global::Kik.Validation.FieldValidation.Types.Order) }, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of protobuf_validation.proto</summary>
  public static partial class ProtobufValidationExtensions {
    /// <summary>
    /// Note tag is just a random number between 50000-99999
    /// (see https://developers.google.com/protocol-buffers/docs/proto#customoptions)
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Kik.Validation.FieldValidation> FieldValidation =
      new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Kik.Validation.FieldValidation>(76249, pb::FieldCodec.ForMessage(609994, global::Kik.Validation.FieldValidation.Parser));
    /// <summary>
    /// Tag number 76251 is used in xiphias-model-common/proto/messagepath/v1/core_message_options.proto
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Kik.Validation.FieldValidation> MapKey =
      new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Kik.Validation.FieldValidation>(76250, pb::FieldCodec.ForMessage(610002, global::Kik.Validation.FieldValidation.Parser));
  }

  #region Messages
  public sealed partial class FieldValidation : pb::IMessage<FieldValidation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FieldValidation> _parser = new pb::MessageParser<FieldValidation>(() => new FieldValidation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldValidation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kik.Validation.ProtobufValidationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldValidation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldValidation(FieldValidation other) : this() {
      _hasBits0 = other._hasBits0;
      mandatory_ = other.mandatory_;
      regex_ = other.regex_;
      minByteLength_ = other.minByteLength_;
      maxByteLength_ = other.maxByteLength_;
      minVal_ = other.minVal_;
      maxVal_ = other.maxVal_;
      minDoubleVal_ = other.minDoubleVal_;
      maxDoubleVal_ = other.maxDoubleVal_;
      minRepetitions_ = other.minRepetitions_;
      maxRepetitions_ = other.maxRepetitions_;
      ordered_ = other.ordered_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldValidation Clone() {
      return new FieldValidation(this);
    }

    /// <summary>Field number for the "mandatory" field.</summary>
    public const int MandatoryFieldNumber = 1;
    private readonly static bool MandatoryDefaultValue = false;

    private bool mandatory_;
    /// <summary>
    /// TODO: Document semantics of this
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mandatory {
      get { if ((_hasBits0 & 1) != 0) { return mandatory_; } else { return MandatoryDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mandatory_ = value;
      }
    }
    /// <summary>Gets whether the "mandatory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMandatory {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mandatory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMandatory() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "regex" field.</summary>
    public const int RegexFieldNumber = 2;
    private readonly static string RegexDefaultValue = "";

    private string regex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Regex {
      get { return regex_ ?? RegexDefaultValue; }
      set {
        regex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "regex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRegex {
      get { return regex_ != null; }
    }
    /// <summary>Clears the value of the "regex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRegex() {
      regex_ = null;
    }

    /// <summary>Field number for the "min_byte_length" field.</summary>
    public const int MinByteLengthFieldNumber = 5;
    private readonly static int MinByteLengthDefaultValue = 0;

    private int minByteLength_;
    /// <summary>
    /// Valid for strings and byte arrays:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinByteLength {
      get { if ((_hasBits0 & 2) != 0) { return minByteLength_; } else { return MinByteLengthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minByteLength_ = value;
      }
    }
    /// <summary>Gets whether the "min_byte_length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinByteLength {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_byte_length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinByteLength() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_byte_length" field.</summary>
    public const int MaxByteLengthFieldNumber = 6;
    private readonly static int MaxByteLengthDefaultValue = 0;

    private int maxByteLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxByteLength {
      get { if ((_hasBits0 & 4) != 0) { return maxByteLength_; } else { return MaxByteLengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxByteLength_ = value;
      }
    }
    /// <summary>Gets whether the "max_byte_length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxByteLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_byte_length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxByteLength() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_val" field.</summary>
    public const int MinValFieldNumber = 7;
    private readonly static long MinValDefaultValue = 0L;

    private long minVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinVal {
      get { if ((_hasBits0 & 8) != 0) { return minVal_; } else { return MinValDefaultValue; } }
      set {
        _hasBits0 |= 8;
        minVal_ = value;
      }
    }
    /// <summary>Gets whether the "min_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinVal {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "min_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinVal() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "max_val" field.</summary>
    public const int MaxValFieldNumber = 8;
    private readonly static long MaxValDefaultValue = 0L;

    private long maxVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxVal {
      get { if ((_hasBits0 & 16) != 0) { return maxVal_; } else { return MaxValDefaultValue; } }
      set {
        _hasBits0 |= 16;
        maxVal_ = value;
      }
    }
    /// <summary>Gets whether the "max_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxVal {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "max_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxVal() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "min_double_val" field.</summary>
    public const int MinDoubleValFieldNumber = 11;
    private readonly static double MinDoubleValDefaultValue = 0D;

    private double minDoubleVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinDoubleVal {
      get { if ((_hasBits0 & 32) != 0) { return minDoubleVal_; } else { return MinDoubleValDefaultValue; } }
      set {
        _hasBits0 |= 32;
        minDoubleVal_ = value;
      }
    }
    /// <summary>Gets whether the "min_double_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinDoubleVal {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "min_double_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinDoubleVal() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "max_double_val" field.</summary>
    public const int MaxDoubleValFieldNumber = 12;
    private readonly static double MaxDoubleValDefaultValue = 0D;

    private double maxDoubleVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxDoubleVal {
      get { if ((_hasBits0 & 64) != 0) { return maxDoubleVal_; } else { return MaxDoubleValDefaultValue; } }
      set {
        _hasBits0 |= 64;
        maxDoubleVal_ = value;
      }
    }
    /// <summary>Gets whether the "max_double_val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxDoubleVal {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "max_double_val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxDoubleVal() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "min_repetitions" field.</summary>
    public const int MinRepetitionsFieldNumber = 15;
    private readonly static uint MinRepetitionsDefaultValue = 0;

    private uint minRepetitions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinRepetitions {
      get { if ((_hasBits0 & 128) != 0) { return minRepetitions_; } else { return MinRepetitionsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        minRepetitions_ = value;
      }
    }
    /// <summary>Gets whether the "min_repetitions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinRepetitions {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "min_repetitions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinRepetitions() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "max_repetitions" field.</summary>
    public const int MaxRepetitionsFieldNumber = 16;
    private readonly static uint MaxRepetitionsDefaultValue = 0;

    private uint maxRepetitions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxRepetitions {
      get { if ((_hasBits0 & 256) != 0) { return maxRepetitions_; } else { return MaxRepetitionsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        maxRepetitions_ = value;
      }
    }
    /// <summary>Gets whether the "max_repetitions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxRepetitions {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "max_repetitions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxRepetitions() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "ordered" field.</summary>
    public const int OrderedFieldNumber = 17;
    private readonly static global::Kik.Validation.FieldValidation.Types.Order OrderedDefaultValue = global::Kik.Validation.FieldValidation.Types.Order.Asc;

    private global::Kik.Validation.FieldValidation.Types.Order ordered_;
    /// <summary>
    /// Valid on repeated fields ONLY (with some additional restrictions on what those fields can contain)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Kik.Validation.FieldValidation.Types.Order Ordered {
      get { if ((_hasBits0 & 512) != 0) { return ordered_; } else { return OrderedDefaultValue; } }
      set {
        _hasBits0 |= 512;
        ordered_ = value;
      }
    }
    /// <summary>Gets whether the "ordered" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrdered {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ordered" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrdered() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldValidation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldValidation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mandatory != other.Mandatory) return false;
      if (Regex != other.Regex) return false;
      if (MinByteLength != other.MinByteLength) return false;
      if (MaxByteLength != other.MaxByteLength) return false;
      if (MinVal != other.MinVal) return false;
      if (MaxVal != other.MaxVal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinDoubleVal, other.MinDoubleVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxDoubleVal, other.MaxDoubleVal)) return false;
      if (MinRepetitions != other.MinRepetitions) return false;
      if (MaxRepetitions != other.MaxRepetitions) return false;
      if (Ordered != other.Ordered) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMandatory) hash ^= Mandatory.GetHashCode();
      if (HasRegex) hash ^= Regex.GetHashCode();
      if (HasMinByteLength) hash ^= MinByteLength.GetHashCode();
      if (HasMaxByteLength) hash ^= MaxByteLength.GetHashCode();
      if (HasMinVal) hash ^= MinVal.GetHashCode();
      if (HasMaxVal) hash ^= MaxVal.GetHashCode();
      if (HasMinDoubleVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinDoubleVal);
      if (HasMaxDoubleVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxDoubleVal);
      if (HasMinRepetitions) hash ^= MinRepetitions.GetHashCode();
      if (HasMaxRepetitions) hash ^= MaxRepetitions.GetHashCode();
      if (HasOrdered) hash ^= Ordered.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMandatory) {
        output.WriteRawTag(8);
        output.WriteBool(Mandatory);
      }
      if (HasRegex) {
        output.WriteRawTag(18);
        output.WriteString(Regex);
      }
      if (HasMinByteLength) {
        output.WriteRawTag(40);
        output.WriteInt32(MinByteLength);
      }
      if (HasMaxByteLength) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxByteLength);
      }
      if (HasMinVal) {
        output.WriteRawTag(57);
        output.WriteSFixed64(MinVal);
      }
      if (HasMaxVal) {
        output.WriteRawTag(65);
        output.WriteSFixed64(MaxVal);
      }
      if (HasMinDoubleVal) {
        output.WriteRawTag(89);
        output.WriteDouble(MinDoubleVal);
      }
      if (HasMaxDoubleVal) {
        output.WriteRawTag(97);
        output.WriteDouble(MaxDoubleVal);
      }
      if (HasMinRepetitions) {
        output.WriteRawTag(120);
        output.WriteUInt32(MinRepetitions);
      }
      if (HasMaxRepetitions) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MaxRepetitions);
      }
      if (HasOrdered) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Ordered);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMandatory) {
        output.WriteRawTag(8);
        output.WriteBool(Mandatory);
      }
      if (HasRegex) {
        output.WriteRawTag(18);
        output.WriteString(Regex);
      }
      if (HasMinByteLength) {
        output.WriteRawTag(40);
        output.WriteInt32(MinByteLength);
      }
      if (HasMaxByteLength) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxByteLength);
      }
      if (HasMinVal) {
        output.WriteRawTag(57);
        output.WriteSFixed64(MinVal);
      }
      if (HasMaxVal) {
        output.WriteRawTag(65);
        output.WriteSFixed64(MaxVal);
      }
      if (HasMinDoubleVal) {
        output.WriteRawTag(89);
        output.WriteDouble(MinDoubleVal);
      }
      if (HasMaxDoubleVal) {
        output.WriteRawTag(97);
        output.WriteDouble(MaxDoubleVal);
      }
      if (HasMinRepetitions) {
        output.WriteRawTag(120);
        output.WriteUInt32(MinRepetitions);
      }
      if (HasMaxRepetitions) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MaxRepetitions);
      }
      if (HasOrdered) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Ordered);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMandatory) {
        size += 1 + 1;
      }
      if (HasRegex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
      }
      if (HasMinByteLength) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinByteLength);
      }
      if (HasMaxByteLength) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxByteLength);
      }
      if (HasMinVal) {
        size += 1 + 8;
      }
      if (HasMaxVal) {
        size += 1 + 8;
      }
      if (HasMinDoubleVal) {
        size += 1 + 8;
      }
      if (HasMaxDoubleVal) {
        size += 1 + 8;
      }
      if (HasMinRepetitions) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinRepetitions);
      }
      if (HasMaxRepetitions) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxRepetitions);
      }
      if (HasOrdered) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ordered);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldValidation other) {
      if (other == null) {
        return;
      }
      if (other.HasMandatory) {
        Mandatory = other.Mandatory;
      }
      if (other.HasRegex) {
        Regex = other.Regex;
      }
      if (other.HasMinByteLength) {
        MinByteLength = other.MinByteLength;
      }
      if (other.HasMaxByteLength) {
        MaxByteLength = other.MaxByteLength;
      }
      if (other.HasMinVal) {
        MinVal = other.MinVal;
      }
      if (other.HasMaxVal) {
        MaxVal = other.MaxVal;
      }
      if (other.HasMinDoubleVal) {
        MinDoubleVal = other.MinDoubleVal;
      }
      if (other.HasMaxDoubleVal) {
        MaxDoubleVal = other.MaxDoubleVal;
      }
      if (other.HasMinRepetitions) {
        MinRepetitions = other.MinRepetitions;
      }
      if (other.HasMaxRepetitions) {
        MaxRepetitions = other.MaxRepetitions;
      }
      if (other.HasOrdered) {
        Ordered = other.Ordered;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mandatory = input.ReadBool();
            break;
          }
          case 18: {
            Regex = input.ReadString();
            break;
          }
          case 40: {
            MinByteLength = input.ReadInt32();
            break;
          }
          case 48: {
            MaxByteLength = input.ReadInt32();
            break;
          }
          case 57: {
            MinVal = input.ReadSFixed64();
            break;
          }
          case 65: {
            MaxVal = input.ReadSFixed64();
            break;
          }
          case 89: {
            MinDoubleVal = input.ReadDouble();
            break;
          }
          case 97: {
            MaxDoubleVal = input.ReadDouble();
            break;
          }
          case 120: {
            MinRepetitions = input.ReadUInt32();
            break;
          }
          case 128: {
            MaxRepetitions = input.ReadUInt32();
            break;
          }
          case 136: {
            Ordered = (global::Kik.Validation.FieldValidation.Types.Order) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mandatory = input.ReadBool();
            break;
          }
          case 18: {
            Regex = input.ReadString();
            break;
          }
          case 40: {
            MinByteLength = input.ReadInt32();
            break;
          }
          case 48: {
            MaxByteLength = input.ReadInt32();
            break;
          }
          case 57: {
            MinVal = input.ReadSFixed64();
            break;
          }
          case 65: {
            MaxVal = input.ReadSFixed64();
            break;
          }
          case 89: {
            MinDoubleVal = input.ReadDouble();
            break;
          }
          case 97: {
            MaxDoubleVal = input.ReadDouble();
            break;
          }
          case 120: {
            MinRepetitions = input.ReadUInt32();
            break;
          }
          case 128: {
            MaxRepetitions = input.ReadUInt32();
            break;
          }
          case 136: {
            Ordered = (global::Kik.Validation.FieldValidation.Types.Order) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FieldValidation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Order {
        /// <summary>
        /// Ascending (smaller to bigger)
        /// </summary>
        [pbr::OriginalName("ASC")] Asc = 0,
        /// <summary>
        /// Descending (bigger to smaller)
        /// </summary>
        [pbr::OriginalName("DESC")] Desc = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
