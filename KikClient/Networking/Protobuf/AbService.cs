// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ab_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mobile.Abtesting.V1 {

  /// <summary>Holder for reflection information generated from ab_service.proto</summary>
  public static partial class AbServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for ab_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AbServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBhYl9zZXJ2aWNlLnByb3RvEhNtb2JpbGUuYWJ0ZXN0aW5nLnYxGhJjb21t",
            "b25fbW9kZWwucHJvdG8aJGFidGVzdGluZy92MS9hYl90ZXN0aW5nX3NoYXJl",
            "ZC5wcm90bxoZcHJvdG9idWZfdmFsaWRhdGlvbi5wcm90byKSAQoVR2V0RXhw",
            "ZXJpbWVudHNSZXF1ZXN0EioKA2ppZBgBIAEoCzIVLmNvbW1vbi5YaUJhcmVV",
            "c2VySmlkQgbKnSUCCAESTQoZcGFydGljaXBhdGluZ19leHBlcmltZW50cxgC",
            "IAMoCzIfLmNvbW1vbi5hYnRlc3RpbmcudjEuRXhwZXJpbWVudEIJyp0lBQgA",
            "gAFkIn8KFkdldEV4cGVyaW1lbnRzUmVzcG9uc2USQgoZcGFydGljaXBhdGlu",
            "Z19leHBlcmltZW50cxgBIAMoCzIfLmNvbW1vbi5hYnRlc3RpbmcudjEuRXhw",
            "ZXJpbWVudBIhChlzaG91bGRfc2VuZF9tZXRyaWNzX2V2ZW50GAIgASgIMoUB",
            "CglBYlRlc3RpbmcSeAobR2V0UGFydGljaXBhdGluZ0V4cGVyaW1lbnRzEiou",
            "bW9iaWxlLmFidGVzdGluZy52MS5HZXRFeHBlcmltZW50c1JlcXVlc3QaKy5t",
            "b2JpbGUuYWJ0ZXN0aW5nLnYxLkdldEV4cGVyaW1lbnRzUmVzcG9uc2UiAEJp",
            "ChVjb20ua2lrLmFidGVzdGluZy5ycGNaUGdpdGh1Yi5jb20va2lraW50ZXJh",
            "Y3RpdmUveGlwaGlhcy1hcGktbW9iaWxlL2dlbmVyYXRlZC9nby9hYnRlc3Rp",
            "bmcvdjE7YWJ0ZXN0aW5nYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common.CommonModelReflection.Descriptor, global::Common.Abtesting.V1.AbTestingSharedReflection.Descriptor, global::Kik.Validation.ProtobufValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobile.Abtesting.V1.GetExperimentsRequest), global::Mobile.Abtesting.V1.GetExperimentsRequest.Parser, new[]{ "Jid", "ParticipatingExperiments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mobile.Abtesting.V1.GetExperimentsResponse), global::Mobile.Abtesting.V1.GetExperimentsResponse.Parser, new[]{ "ParticipatingExperiments", "ShouldSendMetricsEvent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetExperimentsRequest : pb::IMessage<GetExperimentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetExperimentsRequest> _parser = new pb::MessageParser<GetExperimentsRequest>(() => new GetExperimentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExperimentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobile.Abtesting.V1.AbServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentsRequest(GetExperimentsRequest other) : this() {
      jid_ = other.jid_ != null ? other.jid_.Clone() : null;
      participatingExperiments_ = other.participatingExperiments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentsRequest Clone() {
      return new GetExperimentsRequest(this);
    }

    /// <summary>Field number for the "jid" field.</summary>
    public const int JidFieldNumber = 1;
    private global::Common.XiBareUserJid jid_;
    /// <summary>
    /// The jid for the user we are fetching experiments for
    /// NOTE: "This will not be part of the request long term - the server bridge will send the jid as a GRPC header to service." - Dan
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiBareUserJid Jid {
      get { return jid_; }
      set {
        jid_ = value;
      }
    }

    /// <summary>Field number for the "participating_experiments" field.</summary>
    public const int ParticipatingExperimentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.Abtesting.V1.Experiment> _repeated_participatingExperiments_codec
        = pb::FieldCodec.ForMessage(18, global::Common.Abtesting.V1.Experiment.Parser);
    private readonly pbc::RepeatedField<global::Common.Abtesting.V1.Experiment> participatingExperiments_ = new pbc::RepeatedField<global::Common.Abtesting.V1.Experiment>();
    /// <summary>
    /// Set of service selected (and only service selected) Experiment's the user already knows it is in.
    /// We *ARE NOT* including pre-registration selected experiments at this time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.Abtesting.V1.Experiment> ParticipatingExperiments {
      get { return participatingExperiments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExperimentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExperimentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Jid, other.Jid)) return false;
      if(!participatingExperiments_.Equals(other.participatingExperiments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (jid_ != null) hash ^= Jid.GetHashCode();
      hash ^= participatingExperiments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (jid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Jid);
      }
      participatingExperiments_.WriteTo(output, _repeated_participatingExperiments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (jid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Jid);
      }
      participatingExperiments_.WriteTo(ref output, _repeated_participatingExperiments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (jid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jid);
      }
      size += participatingExperiments_.CalculateSize(_repeated_participatingExperiments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExperimentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.jid_ != null) {
        if (jid_ == null) {
          Jid = new global::Common.XiBareUserJid();
        }
        Jid.MergeFrom(other.Jid);
      }
      participatingExperiments_.Add(other.participatingExperiments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (jid_ == null) {
              Jid = new global::Common.XiBareUserJid();
            }
            input.ReadMessage(Jid);
            break;
          }
          case 18: {
            participatingExperiments_.AddEntriesFrom(input, _repeated_participatingExperiments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (jid_ == null) {
              Jid = new global::Common.XiBareUserJid();
            }
            input.ReadMessage(Jid);
            break;
          }
          case 18: {
            participatingExperiments_.AddEntriesFrom(ref input, _repeated_participatingExperiments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetExperimentsResponse : pb::IMessage<GetExperimentsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetExperimentsResponse> _parser = new pb::MessageParser<GetExperimentsResponse>(() => new GetExperimentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExperimentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mobile.Abtesting.V1.AbServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentsResponse(GetExperimentsResponse other) : this() {
      participatingExperiments_ = other.participatingExperiments_.Clone();
      shouldSendMetricsEvent_ = other.shouldSendMetricsEvent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentsResponse Clone() {
      return new GetExperimentsResponse(this);
    }

    /// <summary>Field number for the "participating_experiments" field.</summary>
    public const int ParticipatingExperimentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.Abtesting.V1.Experiment> _repeated_participatingExperiments_codec
        = pb::FieldCodec.ForMessage(10, global::Common.Abtesting.V1.Experiment.Parser);
    private readonly pbc::RepeatedField<global::Common.Abtesting.V1.Experiment> participatingExperiments_ = new pbc::RepeatedField<global::Common.Abtesting.V1.Experiment>();
    /// <summary>
    /// Set of Experiment's associated with the requested user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.Abtesting.V1.Experiment> ParticipatingExperiments {
      get { return participatingExperiments_; }
    }

    /// <summary>Field number for the "should_send_metrics_event" field.</summary>
    public const int ShouldSendMetricsEventFieldNumber = 2;
    private bool shouldSendMetricsEvent_;
    /// <summary>
    /// Determines whether or not this response should direct clients to send the metrics update.
    /// This should be TRUE in the majority of scenarios except for when there is a need to handle
    /// client metrics load issues.
    /// Specifically, this should be only used in overload scenarios to prevent heartbeats for users not in any
    /// experiments. However it is technically possible to be used at any time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldSendMetricsEvent {
      get { return shouldSendMetricsEvent_; }
      set {
        shouldSendMetricsEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExperimentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExperimentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!participatingExperiments_.Equals(other.participatingExperiments_)) return false;
      if (ShouldSendMetricsEvent != other.ShouldSendMetricsEvent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= participatingExperiments_.GetHashCode();
      if (ShouldSendMetricsEvent != false) hash ^= ShouldSendMetricsEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      participatingExperiments_.WriteTo(output, _repeated_participatingExperiments_codec);
      if (ShouldSendMetricsEvent != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShouldSendMetricsEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      participatingExperiments_.WriteTo(ref output, _repeated_participatingExperiments_codec);
      if (ShouldSendMetricsEvent != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShouldSendMetricsEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += participatingExperiments_.CalculateSize(_repeated_participatingExperiments_codec);
      if (ShouldSendMetricsEvent != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExperimentsResponse other) {
      if (other == null) {
        return;
      }
      participatingExperiments_.Add(other.participatingExperiments_);
      if (other.ShouldSendMetricsEvent != false) {
        ShouldSendMetricsEvent = other.ShouldSendMetricsEvent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            participatingExperiments_.AddEntriesFrom(input, _repeated_participatingExperiments_codec);
            break;
          }
          case 16: {
            ShouldSendMetricsEvent = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            participatingExperiments_.AddEntriesFrom(ref input, _repeated_participatingExperiments_codec);
            break;
          }
          case 16: {
            ShouldSendMetricsEvent = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
