// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: augmentum/v1/augmentum_event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Common.Augmentum.V1 {

  /// <summary>Holder for reflection information generated from augmentum/v1/augmentum_event.proto</summary>
  public static partial class AugmentumEventReflection {

    #region Descriptor
    /// <summary>File descriptor for augmentum/v1/augmentum_event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AugmentumEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJhdWdtZW50dW0vdjEvYXVnbWVudHVtX2V2ZW50LnByb3RvEhNjb21tb24u",
            "YXVnbWVudHVtLnYxGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3Rv",
            "GhJjb21tb25fbW9kZWwucHJvdG8aGXByb3RvYnVmX3ZhbGlkYXRpb24ucHJv",
            "dG8iowkKDkF1Z21lbnR1bUV2ZW50EjUKCXRpbWVzdGFtcBgBIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBsqdJQIIARJCCgVldmVudBgCIAEo",
            "CzIrLmNvbW1vbi5hdWdtZW50dW0udjEuQXVnbWVudHVtRXZlbnQuRXZlbnRJ",
            "ZEIGyp0lAggBEiMKC2luc3RhbmNlX2lkGAMgASgLMg4uY29tbW9uLlhpVXVp",
            "ZBInCgh1c2VyX2ppZBgEIAEoCzIVLmNvbW1vbi5YaUJhcmVVc2VySmlkEigK",
            "CWRldmljZV9pZBgFIAEoCUIVyp0lERILXlthLWYwLTldKyQoCDBAEiEKCXBh",
            "Y2tldF9pZBgGIAEoCzIOLmNvbW1vbi5YaVV1aWQSJQoJZ3JvdXBfamlkGAcg",
            "ASgLMhIuY29tbW9uLlhpR3JvdXBKaWQSKAoIdXNlcm5hbWUYFCABKAlCFsqd",
            "JRISDl5bXHdcLl17MiwzMH0kMB4SIgoKY29udGVudF9pZBgVIAEoCzIOLmNv",
            "bW1vbi5YaVV1aWQSRQoNb2F1dGhlZF9lbWFpbBgWIAEoCUIuyp0lKhIlXltc",
            "d1wuXCtcLV9dK0BbXHdcLl0rXC5bYS16QS1aXXsyLDZ9JDCAARJHCg5jbGll",
            "bnRfdmVyc2lvbhgIIAEoCUIvyp0lKxInXlxkK1wuXGQrXC5cZCsoXC5cZCsp",
            "PygtW2EtekEtWjAtOV0rKT8kMBASNgoNZGV2aWNlX3ByZWZpeBgJIAEoDjIf",
            "LmNvbW1vbi5YaURldmljZUlkLkRldmljZVByZWZpeBIzCgtjb21tb25fZGF0",
            "YRgKIAEoCzIeLmNvbW1vbi5hdWdtZW50dW0udjEuQXVnU3RydWN0EjIKCmV2",
            "ZW50X2RhdGEYCyABKAsyHi5jb21tb24uYXVnbWVudHVtLnYxLkF1Z1N0cnVj",
            "dBJKCglhdWdtZW50dW0YDCABKAsyNy5jb21tb24uYXVnbWVudHVtLnYxLkF1",
            "Z21lbnR1bUV2ZW50LkF1Z21lbnR1bUF0dHJpYnV0ZXMa6QEKB0V2ZW50SWQS",
            "cAoGb3JpZ2luGAEgASgJQmDKnSVcCAESVF4oYm90c3BsYXRmb3JtfGJvdHN8",
            "a2lrcG9pbnRzfGtpbndhbGxldHxtb2JpbGV8c2VydmVyfHNwYXJ0fHRlc3Qp",
            "KFwuKHRyYWNpbmd8bG9nKSk/JCgEMEASNQoJbmFtZXNwYWNlGAIgASgJQiLK",
            "nSUeEhleW2EtekEtWl1bXHdcLlwtXXswLDUxMX0kMIAEEjUKBG5hbWUYBSAB",
            "KAlCJ8qdJSMIARIaXlthLXpBLVpdW1x3XC5cLSBdezAsNTExfSQoATCABBqc",
            "AQoTQXVnbWVudHVtQXR0cmlidXRlcxIyCg5pbmdlc3Rpb25fdGltZRgBIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASNgoOaW5qZXN0aW9uX3Rp",
            "bWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgIYARIZCglz",
            "b3VyY2VfaXAYBSABKAlCBsqdJQIwLSK7AQoJQXVnU3RydWN0EmAKBmZpZWxk",
            "cxgBIAMoCzIqLmNvbW1vbi5hdWdtZW50dW0udjEuQXVnU3RydWN0LkZpZWxk",
            "c0VudHJ5QiTSnSUgEhpeW2EtekEtWjAtOV9cLSVcLiBdezEsNjR9JCgBMEAa",
            "TAoLRmllbGRzRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIgASgLMh0u",
            "Y29tbW9uLmF1Z21lbnR1bS52MS5BdWdWYWx1ZToCOAEiiwIKCEF1Z1ZhbHVl",
            "EjcKCm51bGxfdmFsdWUYASABKA4yIS5jb21tb24uYXVnbWVudHVtLnYxLkF1",
            "Z051bGxWYWx1ZUgAEhYKDG51bWJlcl92YWx1ZRgCIAEoAUgAEh8KDHN0cmlu",
            "Z192YWx1ZRgDIAEoCUIHyp0lAzCAEEgAEhQKCmJvb2xfdmFsdWUYBCABKAhI",
            "ABI2CgxzdHJ1Y3RfdmFsdWUYBSABKAsyHi5jb21tb24uYXVnbWVudHVtLnYx",
            "LkF1Z1N0cnVjdEgAEjcKCmxpc3RfdmFsdWUYBiABKAsyIS5jb21tb24uYXVn",
            "bWVudHVtLnYxLkF1Z0xpc3RWYWx1ZUgAQgYKBGtpbmQiPQoMQXVnTGlzdFZh",
            "bHVlEi0KBnZhbHVlcxgBIAMoCzIdLmNvbW1vbi5hdWdtZW50dW0udjEuQXVn",
            "VmFsdWUqHgoMQXVnTnVsbFZhbHVlEg4KCk5VTExfVkFMVUUQAEKNAQoXY29t",
            "Lmtpay5hdWdtZW50dW0ubW9kZWxCE0F1Z21lbnR1bUV2ZW50UHJvdG9QAVpS",
            "Z2l0aHViLmNvbS9raWtpbnRlcmFjdGl2ZS94aXBoaWFzLW1vZGVsLWNvbW1v",
            "bi9nZW5lcmF0ZWQvZ28vYXVnbWVudHVtL3YxO2F1Z21lbnR1baABAaICA0FV",
            "R2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Common.CommonModelReflection.Descriptor, global::Kik.Validation.ProtobufValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Common.Augmentum.V1.AugNullValue), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Augmentum.V1.AugmentumEvent), global::Common.Augmentum.V1.AugmentumEvent.Parser, new[]{ "Timestamp", "Event", "InstanceId", "UserJid", "DeviceId", "PacketId", "GroupJid", "Username", "ContentId", "OauthedEmail", "ClientVersion", "DevicePrefix", "CommonData", "EventData", "Augmentum" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Common.Augmentum.V1.AugmentumEvent.Types.EventId), global::Common.Augmentum.V1.AugmentumEvent.Types.EventId.Parser, new[]{ "Origin", "Namespace", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes), global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes.Parser, new[]{ "IngestionTime", "InjestionTime", "SourceIp" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Augmentum.V1.AugStruct), global::Common.Augmentum.V1.AugStruct.Parser, new[]{ "Fields" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Augmentum.V1.AugValue), global::Common.Augmentum.V1.AugValue.Parser, new[]{ "NullValue", "NumberValue", "StringValue", "BoolValue", "StructValue", "ListValue" }, new[]{ "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Common.Augmentum.V1.AugListValue), global::Common.Augmentum.V1.AugListValue.Parser, new[]{ "Values" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AugNullValue {
    [pbr::OriginalName("NULL_VALUE")] NullValue = 0,
  }

  #endregion

  #region Messages
  /// <summary>
  /// An augmentum event is uniquely identified by considering ALL of the 'timestamp', 'event',
  /// and 'instance_id' fields. ALL fields of the EventId message (event field) MUST be
  /// considered. An event CANNOT be identified uniquely if the instance_id is not set (see comments on
  /// field for additional details). ALL of these fields should be used when creating database primary
  /// keys.
  ///
  /// Currently (June 2016) the maximum size for an augmentum event is restricted 10k (INCLUDING
  /// fields added by the system during processing which MAY total a maximum of 2k) so ingestion
  /// endpoints and event producers should limit the maximum event size to 8k (ideally 4k). These
  /// maximums MAY be subject to increase in the future up to a hard limit of 100k per event (including
  /// a maximum of 10k added by the augmentum system).
  ///
  /// All fields are optional unless explicitly stated otherwise.
  /// </summary>
  public sealed partial class AugmentumEvent : pb::IMessage<AugmentumEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AugmentumEvent> _parser = new pb::MessageParser<AugmentumEvent>(() => new AugmentumEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AugmentumEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Augmentum.V1.AugmentumEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugmentumEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugmentumEvent(AugmentumEvent other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      instanceId_ = other.instanceId_ != null ? other.instanceId_.Clone() : null;
      userJid_ = other.userJid_ != null ? other.userJid_.Clone() : null;
      deviceId_ = other.deviceId_;
      packetId_ = other.packetId_ != null ? other.packetId_.Clone() : null;
      groupJid_ = other.groupJid_ != null ? other.groupJid_.Clone() : null;
      username_ = other.username_;
      contentId_ = other.contentId_ != null ? other.contentId_.Clone() : null;
      oauthedEmail_ = other.oauthedEmail_;
      clientVersion_ = other.clientVersion_;
      devicePrefix_ = other.devicePrefix_;
      commonData_ = other.commonData_ != null ? other.commonData_.Clone() : null;
      eventData_ = other.eventData_ != null ? other.eventData_.Clone() : null;
      augmentum_ = other.augmentum_ != null ? other.augmentum_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugmentumEvent Clone() {
      return new AugmentumEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// REQUIRED
    ///
    /// By convention, when an event spans a time range, this should represent the END time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private global::Common.Augmentum.V1.AugmentumEvent.Types.EventId event_;
    /// <summary>
    /// REQUIRED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugmentumEvent.Types.EventId Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 3;
    private global::Common.XiUuid instanceId_;
    /// <summary>
    /// NOT REQUIRED but SHOULD be set.
    ///
    /// Identifies a unique instance of an event, primarily used to de-duplicate data because of
    /// Two Generals esque problems. See the comments on the AugmentumEvent message for additional
    /// regarding how events are uniquely identified.
    ///
    /// The following guidelines apply to this field:
    ///  - Setting this field is HIGHLY RECOMMENDED although not strictly required
    ///  - If NOT set at the origin of the event, it SHOULD be set as early as possible
    ///    in the data pipeline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiUuid InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "user_jid" field.</summary>
    public const int UserJidFieldNumber = 4;
    private global::Common.XiBareUserJid userJid_;
    /// <summary>
    /// The LOCAL part of a users jid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiBareUserJid UserJid {
      get { return userJid_; }
      set {
        userJid_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 5;
    private string deviceId_ = "";
    /// <summary>
    /// This MUST be the UNPREFIXED device id.
    /// ie: it MUST NOT start with CIP, CAN, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packet_id" field.</summary>
    public const int PacketIdFieldNumber = 6;
    private global::Common.XiUuid packetId_;
    /// <summary>
    /// AKA: message id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiUuid PacketId {
      get { return packetId_; }
      set {
        packetId_ = value;
      }
    }

    /// <summary>Field number for the "group_jid" field.</summary>
    public const int GroupJidFieldNumber = 7;
    private global::Common.XiGroupJid groupJid_;
    /// <summary>
    /// The LOCAL part of a group jid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiGroupJid GroupJid {
      get { return groupJid_; }
      set {
        groupJid_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 20;
    private string username_ = "";
    /// <summary>
    /// Username MUST be treated in a case insensitive way.
    /// Setting this field is necessary ONLY when the jid is unknown.
    /// When set, this username SHOULD represent a real kik user.
    /// DO NOT use this field when this username is known to not be a kik user
    /// or possibly not be a kik user (for example: a 'username search' event).
    ///
    /// The Augmentum/ingestion system SHOULD convert this to a user jid (if possible).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_id" field.</summary>
    public const int ContentIdFieldNumber = 21;
    private global::Common.XiUuid contentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiUuid ContentId {
      get { return contentId_; }
      set {
        contentId_ = value;
      }
    }

    /// <summary>Field number for the "oauthed_email" field.</summary>
    public const int OauthedEmailFieldNumber = 22;
    private string oauthedEmail_ = "";
    /// <summary>
    /// An OAuthed email address used to access a service. A typical use case includes email for an authenticated user
    /// accessing an internal tool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OauthedEmail {
      get { return oauthedEmail_; }
      set {
        oauthedEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 8;
    private string clientVersion_ = "";
    /// <summary>
    /// REQUIRED for origin mobile, OPTIONAL for others.
    ///
    /// When a user_jid or device_id is specified, this refers to the the Kik client version being
    /// used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_prefix" field.</summary>
    public const int DevicePrefixFieldNumber = 9;
    private global::Common.XiDeviceId.Types.DevicePrefix devicePrefix_ = global::Common.XiDeviceId.Types.DevicePrefix.None;
    /// <summary>
    /// REQUIRED for origin mobile, OPTIONAL for others
    ///
    /// When a user_jid or device_id is specified, this refers to the the Kik device type being
    /// used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.XiDeviceId.Types.DevicePrefix DevicePrefix {
      get { return devicePrefix_; }
      set {
        devicePrefix_ = value;
      }
    }

    /// <summary>Field number for the "common_data" field.</summary>
    public const int CommonDataFieldNumber = 10;
    private global::Common.Augmentum.V1.AugStruct commonData_;
    /// <summary>
    /// Common data:
    ///  - Is conceptually equivalent to mixpanel super properties.
    ///  - MAY be added to the event behind the scenes by the client library
    ///  - SHOULD NOT be specific to a particular instance of an event.
    ///
    /// May be fairly arbitrary JSON (see AugStruct for restrictions though).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugStruct CommonData {
      get { return commonData_; }
      set {
        commonData_ = value;
      }
    }

    /// <summary>Field number for the "event_data" field.</summary>
    public const int EventDataFieldNumber = 11;
    private global::Common.Augmentum.V1.AugStruct eventData_;
    /// <summary>
    /// Flexible and arbitrary data associated with this specific event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugStruct EventData {
      get { return eventData_; }
      set {
        eventData_ = value;
      }
    }

    /// <summary>Field number for the "augmentum" field.</summary>
    public const int AugmentumFieldNumber = 12;
    private global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes augmentum_;
    /// <summary>
    /// MUST NOT be set by even producers. This field is added by the Augmentum system directly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes Augmentum {
      get { return augmentum_; }
      set {
        augmentum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AugmentumEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AugmentumEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(InstanceId, other.InstanceId)) return false;
      if (!object.Equals(UserJid, other.UserJid)) return false;
      if (DeviceId != other.DeviceId) return false;
      if (!object.Equals(PacketId, other.PacketId)) return false;
      if (!object.Equals(GroupJid, other.GroupJid)) return false;
      if (Username != other.Username) return false;
      if (!object.Equals(ContentId, other.ContentId)) return false;
      if (OauthedEmail != other.OauthedEmail) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (DevicePrefix != other.DevicePrefix) return false;
      if (!object.Equals(CommonData, other.CommonData)) return false;
      if (!object.Equals(EventData, other.EventData)) return false;
      if (!object.Equals(Augmentum, other.Augmentum)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (instanceId_ != null) hash ^= InstanceId.GetHashCode();
      if (userJid_ != null) hash ^= UserJid.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (packetId_ != null) hash ^= PacketId.GetHashCode();
      if (groupJid_ != null) hash ^= GroupJid.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (contentId_ != null) hash ^= ContentId.GetHashCode();
      if (OauthedEmail.Length != 0) hash ^= OauthedEmail.GetHashCode();
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DevicePrefix != global::Common.XiDeviceId.Types.DevicePrefix.None) hash ^= DevicePrefix.GetHashCode();
      if (commonData_ != null) hash ^= CommonData.GetHashCode();
      if (eventData_ != null) hash ^= EventData.GetHashCode();
      if (augmentum_ != null) hash ^= Augmentum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (event_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (instanceId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InstanceId);
      }
      if (userJid_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserJid);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeviceId);
      }
      if (packetId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PacketId);
      }
      if (groupJid_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GroupJid);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientVersion);
      }
      if (DevicePrefix != global::Common.XiDeviceId.Types.DevicePrefix.None) {
        output.WriteRawTag(72);
        output.WriteEnum((int) DevicePrefix);
      }
      if (commonData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CommonData);
      }
      if (eventData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EventData);
      }
      if (augmentum_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Augmentum);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Username);
      }
      if (contentId_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ContentId);
      }
      if (OauthedEmail.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(OauthedEmail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (event_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (instanceId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InstanceId);
      }
      if (userJid_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserJid);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeviceId);
      }
      if (packetId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PacketId);
      }
      if (groupJid_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GroupJid);
      }
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientVersion);
      }
      if (DevicePrefix != global::Common.XiDeviceId.Types.DevicePrefix.None) {
        output.WriteRawTag(72);
        output.WriteEnum((int) DevicePrefix);
      }
      if (commonData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CommonData);
      }
      if (eventData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EventData);
      }
      if (augmentum_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Augmentum);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Username);
      }
      if (contentId_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ContentId);
      }
      if (OauthedEmail.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(OauthedEmail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (instanceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceId);
      }
      if (userJid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserJid);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (packetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PacketId);
      }
      if (groupJid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupJid);
      }
      if (Username.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (contentId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContentId);
      }
      if (OauthedEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OauthedEmail);
      }
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DevicePrefix != global::Common.XiDeviceId.Types.DevicePrefix.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DevicePrefix);
      }
      if (commonData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonData);
      }
      if (eventData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventData);
      }
      if (augmentum_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Augmentum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AugmentumEvent other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::Common.Augmentum.V1.AugmentumEvent.Types.EventId();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.instanceId_ != null) {
        if (instanceId_ == null) {
          InstanceId = new global::Common.XiUuid();
        }
        InstanceId.MergeFrom(other.InstanceId);
      }
      if (other.userJid_ != null) {
        if (userJid_ == null) {
          UserJid = new global::Common.XiBareUserJid();
        }
        UserJid.MergeFrom(other.UserJid);
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.packetId_ != null) {
        if (packetId_ == null) {
          PacketId = new global::Common.XiUuid();
        }
        PacketId.MergeFrom(other.PacketId);
      }
      if (other.groupJid_ != null) {
        if (groupJid_ == null) {
          GroupJid = new global::Common.XiGroupJid();
        }
        GroupJid.MergeFrom(other.GroupJid);
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.contentId_ != null) {
        if (contentId_ == null) {
          ContentId = new global::Common.XiUuid();
        }
        ContentId.MergeFrom(other.ContentId);
      }
      if (other.OauthedEmail.Length != 0) {
        OauthedEmail = other.OauthedEmail;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DevicePrefix != global::Common.XiDeviceId.Types.DevicePrefix.None) {
        DevicePrefix = other.DevicePrefix;
      }
      if (other.commonData_ != null) {
        if (commonData_ == null) {
          CommonData = new global::Common.Augmentum.V1.AugStruct();
        }
        CommonData.MergeFrom(other.CommonData);
      }
      if (other.eventData_ != null) {
        if (eventData_ == null) {
          EventData = new global::Common.Augmentum.V1.AugStruct();
        }
        EventData.MergeFrom(other.EventData);
      }
      if (other.augmentum_ != null) {
        if (augmentum_ == null) {
          Augmentum = new global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes();
        }
        Augmentum.MergeFrom(other.Augmentum);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            if (event_ == null) {
              Event = new global::Common.Augmentum.V1.AugmentumEvent.Types.EventId();
            }
            input.ReadMessage(Event);
            break;
          }
          case 26: {
            if (instanceId_ == null) {
              InstanceId = new global::Common.XiUuid();
            }
            input.ReadMessage(InstanceId);
            break;
          }
          case 34: {
            if (userJid_ == null) {
              UserJid = new global::Common.XiBareUserJid();
            }
            input.ReadMessage(UserJid);
            break;
          }
          case 42: {
            DeviceId = input.ReadString();
            break;
          }
          case 50: {
            if (packetId_ == null) {
              PacketId = new global::Common.XiUuid();
            }
            input.ReadMessage(PacketId);
            break;
          }
          case 58: {
            if (groupJid_ == null) {
              GroupJid = new global::Common.XiGroupJid();
            }
            input.ReadMessage(GroupJid);
            break;
          }
          case 66: {
            ClientVersion = input.ReadString();
            break;
          }
          case 72: {
            DevicePrefix = (global::Common.XiDeviceId.Types.DevicePrefix) input.ReadEnum();
            break;
          }
          case 82: {
            if (commonData_ == null) {
              CommonData = new global::Common.Augmentum.V1.AugStruct();
            }
            input.ReadMessage(CommonData);
            break;
          }
          case 90: {
            if (eventData_ == null) {
              EventData = new global::Common.Augmentum.V1.AugStruct();
            }
            input.ReadMessage(EventData);
            break;
          }
          case 98: {
            if (augmentum_ == null) {
              Augmentum = new global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes();
            }
            input.ReadMessage(Augmentum);
            break;
          }
          case 162: {
            Username = input.ReadString();
            break;
          }
          case 170: {
            if (contentId_ == null) {
              ContentId = new global::Common.XiUuid();
            }
            input.ReadMessage(ContentId);
            break;
          }
          case 178: {
            OauthedEmail = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            if (event_ == null) {
              Event = new global::Common.Augmentum.V1.AugmentumEvent.Types.EventId();
            }
            input.ReadMessage(Event);
            break;
          }
          case 26: {
            if (instanceId_ == null) {
              InstanceId = new global::Common.XiUuid();
            }
            input.ReadMessage(InstanceId);
            break;
          }
          case 34: {
            if (userJid_ == null) {
              UserJid = new global::Common.XiBareUserJid();
            }
            input.ReadMessage(UserJid);
            break;
          }
          case 42: {
            DeviceId = input.ReadString();
            break;
          }
          case 50: {
            if (packetId_ == null) {
              PacketId = new global::Common.XiUuid();
            }
            input.ReadMessage(PacketId);
            break;
          }
          case 58: {
            if (groupJid_ == null) {
              GroupJid = new global::Common.XiGroupJid();
            }
            input.ReadMessage(GroupJid);
            break;
          }
          case 66: {
            ClientVersion = input.ReadString();
            break;
          }
          case 72: {
            DevicePrefix = (global::Common.XiDeviceId.Types.DevicePrefix) input.ReadEnum();
            break;
          }
          case 82: {
            if (commonData_ == null) {
              CommonData = new global::Common.Augmentum.V1.AugStruct();
            }
            input.ReadMessage(CommonData);
            break;
          }
          case 90: {
            if (eventData_ == null) {
              EventData = new global::Common.Augmentum.V1.AugStruct();
            }
            input.ReadMessage(EventData);
            break;
          }
          case 98: {
            if (augmentum_ == null) {
              Augmentum = new global::Common.Augmentum.V1.AugmentumEvent.Types.AugmentumAttributes();
            }
            input.ReadMessage(Augmentum);
            break;
          }
          case 162: {
            Username = input.ReadString();
            break;
          }
          case 170: {
            if (contentId_ == null) {
              ContentId = new global::Common.XiUuid();
            }
            input.ReadMessage(ContentId);
            break;
          }
          case 178: {
            OauthedEmail = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AugmentumEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// All fields should be restricted to ensure compatibility with S3 object keys
      /// http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-key-guidelines-safe-characters
      /// </summary>
      public sealed partial class EventId : pb::IMessage<EventId>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EventId> _parser = new pb::MessageParser<EventId>(() => new EventId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Common.Augmentum.V1.AugmentumEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventId(EventId other) : this() {
          origin_ = other.origin_;
          namespace_ = other.namespace_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventId Clone() {
          return new EventId(this);
        }

        /// <summary>Field number for the "origin" field.</summary>
        public const int OriginFieldNumber = 1;
        private string origin_ = "";
        /// <summary>
        /// REQUIRED
        ///
        /// Identifies the physical place the event was generated, specifically as it relates to
        /// control of event naming (ex: dev team or codebase) plus the security and trust context.
        /// Use the namespace field to provide additional context for where the event was generated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Origin {
          get { return origin_; }
          set {
            origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "namespace" field.</summary>
        public const int NamespaceFieldNumber = 2;
        private string namespace_ = "";
        /// <summary>
        /// HIGHLY RECOMMENDED be set
        ///
        /// Further identifies the place the event was generated within the context of the origin. It is up to the owners of the origin to
        /// determine what makes sense for setting this field. This field MUST NOT be dynamic in any way (ie. it should not be constructed from
        /// something whose output is not constant like timestamps, user input, usernames, JIDs, hostnames, IPs, URLs, etc). The following are
        /// the standards adopted by server.
        ///
        /// For an event that is not intended for tracing or logging, the source code repository name is typically used to help structure the
        /// namespace value. Parts of the repository name are used to start the namespace value, which can be optionally followed by dot
        /// delimited strings. For example, Xiphias service repositories have the form xiphias-service-{name}. In this case, the namespace would
        /// begin with {name}. For all other repositories, use the exact repository name. For larger repositories like kik-server, you may
        /// want to break the namespace based on the context of its sub projects. For example, the core server project can use the namespace
        /// kik-server.tigase, while the support site can use kik-server.support.
        ///
        /// Standards for request tracing and logging events are in the process of being finalized.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Namespace {
          get { return namespace_; }
          set {
            namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 5;
        private string name_ = "";
        /// <summary>
        /// REQUIRED
        ///
        /// The name of the event. It is up to the owners of the origin to determine what makes sense for setting this field.
        /// This field MUST NOT be dynamic in any way (ie. it should not be constructed from something whose output is not
        /// constant like timestamps, user input, usernames, JIDs, hostnames, IPs, URLs, etc).
        ///
        /// For an event that is not intended for tracing or logging, this is the value of an enum. For languages that don't
        /// support enums, this can be a set of strings.
        ///
        /// Standards for request tracing and logging events are in the process of being finalized.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Origin != other.Origin) return false;
          if (Namespace != other.Namespace) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Origin.Length != 0) hash ^= Origin.GetHashCode();
          if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Origin.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Origin);
          }
          if (Namespace.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Namespace);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Origin.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Origin);
          }
          if (Namespace.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Namespace);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Origin.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
          }
          if (Namespace.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventId other) {
          if (other == null) {
            return;
          }
          if (other.Origin.Length != 0) {
            Origin = other.Origin;
          }
          if (other.Namespace.Length != 0) {
            Namespace = other.Namespace;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Origin = input.ReadString();
                break;
              }
              case 18: {
                Namespace = input.ReadString();
                break;
              }
              case 42: {
                Name = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Origin = input.ReadString();
                break;
              }
              case 18: {
                Namespace = input.ReadString();
                break;
              }
              case 42: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class AugmentumAttributes : pb::IMessage<AugmentumAttributes>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AugmentumAttributes> _parser = new pb::MessageParser<AugmentumAttributes>(() => new AugmentumAttributes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AugmentumAttributes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Common.Augmentum.V1.AugmentumEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AugmentumAttributes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AugmentumAttributes(AugmentumAttributes other) : this() {
          ingestionTime_ = other.ingestionTime_ != null ? other.ingestionTime_.Clone() : null;
          injestionTime_ = other.injestionTime_ != null ? other.injestionTime_.Clone() : null;
          sourceIp_ = other.sourceIp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AugmentumAttributes Clone() {
          return new AugmentumAttributes(this);
        }

        /// <summary>Field number for the "ingestion_time" field.</summary>
        public const int IngestionTimeFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp ingestionTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp IngestionTime {
          get { return ingestionTime_; }
          set {
            ingestionTime_ = value;
          }
        }

        /// <summary>Field number for the "injestion_time" field.</summary>
        public const int InjestionTimeFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp injestionTime_;
        /// <summary>
        /// DEPRECATED - will be removed in the near future (injestion being an incorrect spelling)
        ///
        /// Should ONLY be used when delivering flattened events to the legacy augmentum-firehose-mobile
        /// kinesis stream.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp InjestionTime {
          get { return injestionTime_; }
          set {
            injestionTime_ = value;
          }
        }

        /// <summary>Field number for the "source_ip" field.</summary>
        public const int SourceIpFieldNumber = 5;
        private string sourceIp_ = "";
        /// <summary>
        /// The IP from which the event originated (may be either ipv4 or ipv6 style).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourceIp {
          get { return sourceIp_; }
          set {
            sourceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AugmentumAttributes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AugmentumAttributes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(IngestionTime, other.IngestionTime)) return false;
          if (!object.Equals(InjestionTime, other.InjestionTime)) return false;
          if (SourceIp != other.SourceIp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ingestionTime_ != null) hash ^= IngestionTime.GetHashCode();
          if (injestionTime_ != null) hash ^= InjestionTime.GetHashCode();
          if (SourceIp.Length != 0) hash ^= SourceIp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ingestionTime_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(IngestionTime);
          }
          if (injestionTime_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(InjestionTime);
          }
          if (SourceIp.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SourceIp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ingestionTime_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(IngestionTime);
          }
          if (injestionTime_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(InjestionTime);
          }
          if (SourceIp.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SourceIp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ingestionTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(IngestionTime);
          }
          if (injestionTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InjestionTime);
          }
          if (SourceIp.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceIp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AugmentumAttributes other) {
          if (other == null) {
            return;
          }
          if (other.ingestionTime_ != null) {
            if (ingestionTime_ == null) {
              IngestionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            IngestionTime.MergeFrom(other.IngestionTime);
          }
          if (other.injestionTime_ != null) {
            if (injestionTime_ == null) {
              InjestionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            InjestionTime.MergeFrom(other.InjestionTime);
          }
          if (other.SourceIp.Length != 0) {
            SourceIp = other.SourceIp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (ingestionTime_ == null) {
                  IngestionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(IngestionTime);
                break;
              }
              case 18: {
                if (injestionTime_ == null) {
                  InjestionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(InjestionTime);
                break;
              }
              case 42: {
                SourceIp = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (ingestionTime_ == null) {
                  IngestionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(IngestionTime);
                break;
              }
              case 18: {
                if (injestionTime_ == null) {
                  InjestionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(InjestionTime);
                break;
              }
              case 42: {
                SourceIp = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// This is a JSON object.
  /// </summary>
  public sealed partial class AugStruct : pb::IMessage<AugStruct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AugStruct> _parser = new pb::MessageParser<AugStruct>(() => new AugStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AugStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Augmentum.V1.AugmentumEventReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugStruct(AugStruct other) : this() {
      fields_ = other.fields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugStruct Clone() {
      return new AugStruct(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Common.Augmentum.V1.AugValue>.Codec _map_fields_codec
        = new pbc::MapField<string, global::Common.Augmentum.V1.AugValue>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Common.Augmentum.V1.AugValue.Parser), 10);
    private readonly pbc::MapField<string, global::Common.Augmentum.V1.AugValue> fields_ = new pbc::MapField<string, global::Common.Augmentum.V1.AugValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Common.Augmentum.V1.AugValue> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AugStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AugStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Fields.Equals(other.Fields)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Fields.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fields_.WriteTo(output, _map_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fields_.WriteTo(ref output, _map_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_map_fields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AugStruct other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fields_.AddEntriesFrom(ref input, _map_fields_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AugValue : pb::IMessage<AugValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AugValue> _parser = new pb::MessageParser<AugValue>(() => new AugValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AugValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Augmentum.V1.AugmentumEventReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugValue(AugValue other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.NullValue:
          NullValue = other.NullValue;
          break;
        case KindOneofCase.NumberValue:
          NumberValue = other.NumberValue;
          break;
        case KindOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case KindOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case KindOneofCase.StructValue:
          StructValue = other.StructValue.Clone();
          break;
        case KindOneofCase.ListValue:
          ListValue = other.ListValue.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugValue Clone() {
      return new AugValue(this);
    }

    /// <summary>Field number for the "null_value" field.</summary>
    public const int NullValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugNullValue NullValue {
      get { return kindCase_ == KindOneofCase.NullValue ? (global::Common.Augmentum.V1.AugNullValue) kind_ : global::Common.Augmentum.V1.AugNullValue.NullValue; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.NullValue;
      }
    }

    /// <summary>Field number for the "number_value" field.</summary>
    public const int NumberValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NumberValue {
      get { return kindCase_ == KindOneofCase.NumberValue ? (double) kind_ : 0D; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.NumberValue;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return kindCase_ == KindOneofCase.StringValue ? (string) kind_ : ""; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        kindCase_ = KindOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return kindCase_ == KindOneofCase.BoolValue ? (bool) kind_ : false; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "struct_value" field.</summary>
    public const int StructValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugStruct StructValue {
      get { return kindCase_ == KindOneofCase.StructValue ? (global::Common.Augmentum.V1.AugStruct) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.StructValue;
      }
    }

    /// <summary>Field number for the "list_value" field.</summary>
    public const int ListValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Augmentum.V1.AugListValue ListValue {
      get { return kindCase_ == KindOneofCase.ListValue ? (global::Common.Augmentum.V1.AugListValue) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.ListValue;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      NullValue = 1,
      NumberValue = 2,
      StringValue = 3,
      BoolValue = 4,
      StructValue = 5,
      ListValue = 6,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AugValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AugValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NullValue != other.NullValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NumberValue, other.NumberValue)) return false;
      if (StringValue != other.StringValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (!object.Equals(StructValue, other.StructValue)) return false;
      if (!object.Equals(ListValue, other.ListValue)) return false;
      if (KindCase != other.KindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.NullValue) hash ^= NullValue.GetHashCode();
      if (kindCase_ == KindOneofCase.NumberValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NumberValue);
      if (kindCase_ == KindOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (kindCase_ == KindOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (kindCase_ == KindOneofCase.StructValue) hash ^= StructValue.GetHashCode();
      if (kindCase_ == KindOneofCase.ListValue) hash ^= ListValue.GetHashCode();
      hash ^= (int) kindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (kindCase_ == KindOneofCase.NullValue) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NullValue);
      }
      if (kindCase_ == KindOneofCase.NumberValue) {
        output.WriteRawTag(17);
        output.WriteDouble(NumberValue);
      }
      if (kindCase_ == KindOneofCase.StringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (kindCase_ == KindOneofCase.BoolValue) {
        output.WriteRawTag(32);
        output.WriteBool(BoolValue);
      }
      if (kindCase_ == KindOneofCase.StructValue) {
        output.WriteRawTag(42);
        output.WriteMessage(StructValue);
      }
      if (kindCase_ == KindOneofCase.ListValue) {
        output.WriteRawTag(50);
        output.WriteMessage(ListValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (kindCase_ == KindOneofCase.NullValue) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NullValue);
      }
      if (kindCase_ == KindOneofCase.NumberValue) {
        output.WriteRawTag(17);
        output.WriteDouble(NumberValue);
      }
      if (kindCase_ == KindOneofCase.StringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (kindCase_ == KindOneofCase.BoolValue) {
        output.WriteRawTag(32);
        output.WriteBool(BoolValue);
      }
      if (kindCase_ == KindOneofCase.StructValue) {
        output.WriteRawTag(42);
        output.WriteMessage(StructValue);
      }
      if (kindCase_ == KindOneofCase.ListValue) {
        output.WriteRawTag(50);
        output.WriteMessage(ListValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.NullValue) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NullValue);
      }
      if (kindCase_ == KindOneofCase.NumberValue) {
        size += 1 + 8;
      }
      if (kindCase_ == KindOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (kindCase_ == KindOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (kindCase_ == KindOneofCase.StructValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructValue);
      }
      if (kindCase_ == KindOneofCase.ListValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AugValue other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.NullValue:
          NullValue = other.NullValue;
          break;
        case KindOneofCase.NumberValue:
          NumberValue = other.NumberValue;
          break;
        case KindOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case KindOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case KindOneofCase.StructValue:
          if (StructValue == null) {
            StructValue = new global::Common.Augmentum.V1.AugStruct();
          }
          StructValue.MergeFrom(other.StructValue);
          break;
        case KindOneofCase.ListValue:
          if (ListValue == null) {
            ListValue = new global::Common.Augmentum.V1.AugListValue();
          }
          ListValue.MergeFrom(other.ListValue);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            kind_ = input.ReadEnum();
            kindCase_ = KindOneofCase.NullValue;
            break;
          }
          case 17: {
            NumberValue = input.ReadDouble();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            BoolValue = input.ReadBool();
            break;
          }
          case 42: {
            global::Common.Augmentum.V1.AugStruct subBuilder = new global::Common.Augmentum.V1.AugStruct();
            if (kindCase_ == KindOneofCase.StructValue) {
              subBuilder.MergeFrom(StructValue);
            }
            input.ReadMessage(subBuilder);
            StructValue = subBuilder;
            break;
          }
          case 50: {
            global::Common.Augmentum.V1.AugListValue subBuilder = new global::Common.Augmentum.V1.AugListValue();
            if (kindCase_ == KindOneofCase.ListValue) {
              subBuilder.MergeFrom(ListValue);
            }
            input.ReadMessage(subBuilder);
            ListValue = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            kind_ = input.ReadEnum();
            kindCase_ = KindOneofCase.NullValue;
            break;
          }
          case 17: {
            NumberValue = input.ReadDouble();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            BoolValue = input.ReadBool();
            break;
          }
          case 42: {
            global::Common.Augmentum.V1.AugStruct subBuilder = new global::Common.Augmentum.V1.AugStruct();
            if (kindCase_ == KindOneofCase.StructValue) {
              subBuilder.MergeFrom(StructValue);
            }
            input.ReadMessage(subBuilder);
            StructValue = subBuilder;
            break;
          }
          case 50: {
            global::Common.Augmentum.V1.AugListValue subBuilder = new global::Common.Augmentum.V1.AugListValue();
            if (kindCase_ == KindOneofCase.ListValue) {
              subBuilder.MergeFrom(ListValue);
            }
            input.ReadMessage(subBuilder);
            ListValue = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AugListValue : pb::IMessage<AugListValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AugListValue> _parser = new pb::MessageParser<AugListValue>(() => new AugListValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AugListValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Common.Augmentum.V1.AugmentumEventReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugListValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugListValue(AugListValue other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AugListValue Clone() {
      return new AugListValue(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.Augmentum.V1.AugValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Common.Augmentum.V1.AugValue.Parser);
    private readonly pbc::RepeatedField<global::Common.Augmentum.V1.AugValue> values_ = new pbc::RepeatedField<global::Common.Augmentum.V1.AugValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.Augmentum.V1.AugValue> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AugListValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AugListValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AugListValue other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
